<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NATS.Client</name>
    </assembly>
    <members>
        <member name="T:NATS.Client.AsyncSubscription">
            <summary>
            <see cref="T:NATS.Client.AsyncSubscription"/> asynchronously delivers messages to listeners of the <see cref="E:NATS.Client.AsyncSubscription.MessageHandler"/>
            event. This class should not be used directly.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.AsyncSubscription"/> is created without listening to the <see cref="E:NATS.Client.AsyncSubscription.MessageHandler"/>
            event, no messages will be received until <see cref="M:NATS.Client.AsyncSubscription.Start"/> has been called.
            </remarks>
        </member>
        <member name="E:NATS.Client.AsyncSubscription.MessageHandler">
            <summary>
            Occurs when the <see cref="T:NATS.Client.AsyncSubscription"/> receives a message from the
            underlying <see cref="T:NATS.Client.Subscription"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.AsyncSubscription.Start">
            <summary>
            Starts delivering received messages to listeners on <see cref="E:NATS.Client.AsyncSubscription.MessageHandler"/>
            from a separate thread.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.IAsyncSubscription"/> has already started delivering messages, this
            method is a no-op.
            </remarks>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="T:NATS.Client.Connection"/>
            for this <see cref="T:NATS.Client.AsyncSubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.AsyncSubscription.Unsubscribe">
            <summary>
            Removes interest in the given subject.
            </summary>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="T:NATS.Client.Connection"/>
            for this <see cref="T:NATS.Client.AsyncSubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.AsyncSubscription.AutoUnsubscribe(System.Int32)">
            <summary>
            Issues an automatic call to <see cref="M:NATS.Client.AsyncSubscription.Unsubscribe"/> when <paramref name="max"/> messages have been
            received.
            </summary>
            <remarks><para>This can be useful when sending a request to an unknown number of subscribers.
            <see cref="T:NATS.Client.Connection"/>'s Request methods use this functionality.</para>
            <para>Calling this method will invoke <see cref="M:NATS.Client.AsyncSubscription.Start"/> if it has not already been called.</para></remarks>
            <param name="max">The maximum number of messages to receive on the subscription before calling
            <see cref="M:NATS.Client.AsyncSubscription.Unsubscribe"/>. Values less than or equal to zero (<c>0</c>) unsubscribe immediately.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="T:NATS.Client.Connection"/>
            for this <see cref="T:NATS.Client.AsyncSubscription"/>.</exception>
        </member>
        <member name="T:NATS.Client.ConnState">
            <summary>
            State of the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.DISCONNECTED">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is disconnected.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.CONNECTED">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is connected to a NATS Server.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.CLOSED">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> has been closed.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.RECONNECTING">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is currently reconnecting
            to a NATS Server.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.CONNECTING">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is currently connecting
            to a NATS Server.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.DRAINING_SUBS">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is currently draining subscriptions.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.DRAINING_PUBS">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is currently connecting draining
            publishers.
            </summary>
        </member>
        <member name="T:NATS.Client.Connection">
            <summary>
            <see cref="T:NATS.Client.Connection"/> represents a bare connection to a NATS server.
            Users should create an <see cref="T:NATS.Client.IConnection"/> instance using
            <see cref="T:NATS.Client.ConnectionFactory"/> rather than directly using this class.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.Opts">
            <summary>
            Gets the configuration options for this instance.
            </summary>
        </member>
        <member name="T:NATS.Client.Connection.TCPConnection">
            <summary>
            Convenience class representing the TCP connection to prevent 
            managing two variables throughout the NATs client code.
            </summary>
        </member>
        <member name="F:NATS.Client.Connection.TCPConnection.mu">
            A note on the use of streams.  .NET provides a BufferedStream
            that can sit on top of an IO stream, in this case the network
            stream. It increases performance by providing an additional
            buffer.
            
            So, here's what we have for writing:
                Client code
                     ->BufferedStream (bw)
                         ->NetworkStream/SslStream (srvStream)
                             ->TCPClient (srvClient);
                             
             For reading:
                Client code
                     ->NetworkStream/SslStream (srvStream)
                         ->TCPClient (srvClient);
            
        </member>
        <member name="T:NATS.Client.Connection.SubChannelPool">
            <summary>
            The SubChannelPool class is used when the application
            has specified async subscribers will share channels and associated
            processing threads in the connection.  It simply returns a channel 
            that already has a long running task (thread) processing it.  
            Async subscribers use this channel in lieu of their own channel and
            message processing task.
            </summary>
        </member>
        <member name="T:NATS.Client.Connection.SubChannelPool.SubChannelProcessor">
            <summary>
            SubChannelProcessor creates a channel and a task to process
            messages on that channel.
            </summary>
        </member>
        <member name="M:NATS.Client.Connection.SubChannelPool.getChannel">
            <summary>
            Gets a message channel for use with an async subscriber.
            </summary>
            <returns>
            A channel, already setup with a task processing messages.
            </returns>
        </member>
        <member name="M:NATS.Client.Connection.getMessageChannel">
            <summary>
            Gets an available message channel for use with async subscribers.  It will
            setup the message channel pool if configured to do so.
            </summary>
            <returns>
            A channel for use, null if configuration dictates not to use the 
            channel pool.
            </returns>
        </member>
        <member name="M:NATS.Client.Connection.#ctor(NATS.Client.Options)">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Connection"/> class
            with the specified <see cref="T:NATS.Client.Options"/>.
            </summary>
            <param name="options">The configuration options to use for this 
            <see cref="T:NATS.Client.Connection"/>.</param>
        </member>
        <member name="P:NATS.Client.Connection.ConnectedUrl">
            <summary>
            Gets the URL of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.ClientIP">
            <summary>
            Gets the IP of client as known by the NATS server, otherwise <c>null</c>.
            </summary>
            <remarks>
            Supported in the NATS server version 2.1.6 and above.  If the client is connected to
            an older server or is in the process of connecting, null will be returned.
            </remarks>
        </member>
        <member name="P:NATS.Client.Connection.ClientID">
            <summary>
            Gets the ID of client as known by the NATS server, otherwise <c>null</c>.
            </summary>
            <remarks>
            May not be supported in all versions of the server. If the client is connected to
            an older server or is in the process of connecting, 0 will be returned.
            </remarks>
        </member>
        <member name="P:NATS.Client.Connection.ConnectedId">
            <summary>
            Gets the server ID of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.Servers">
            <summary>
            Gets an array of known server URLs for this instance.
            </summary>
            <remarks><see cref="P:NATS.Client.Connection.Servers"/> also includes any additional
            servers discovered after a connection has been established. If
            authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.Connection.DiscoveredServers">
            <summary>
            Gets an array of server URLs that were discovered after this
            instance connected.
            </summary>
            <remarks>If authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.Connection.LastError">
            <summary>
            Gets the last <see cref="T:System.Exception"/> encountered by this instance,
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.Publish(NATS.Client.Msg)">
            <summary>
            Publishes a <see cref="T:NATS.Client.Msg"/> instance, which includes the subject, an optional reply, and an
            optional data field.
            </summary>
            <param name="msg">A <see cref="T:NATS.Client.Msg"/> instance containing the subject, optional reply, and data to publish
            to the NATS server.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="msg"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <see cref="P:NATS.Client.Msg.Subject"/> property of
            <paramref name="msg"/> is <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">The <see cref="P:NATS.Client.Msg.Data"/> property of <paramref name="msg"/> 
            exceeds the maximum payload size supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call 
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[])">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(NATS.Client.Msg,System.Int32)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(NATS.Client.Msg)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  The reply subject will be overridden.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="message"/> payload exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(NATS.Client.Msg)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(NATS.Client.Msg)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  The reply subject will be overridden.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="message"/> payload exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[])">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size supported
            by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while 
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before it
            could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>,
            while monitoring for cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Int32)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="message"/> payload exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="message"/> payload exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero
            (<c>0</c>).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="message"/> payload exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="message"/> payload exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while 
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before it
            could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.NewInbox">
            <summary>
            Creates an inbox string which can be used for directed replies from subscribers.
            </summary>
            <remarks>
            The returned inboxes are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </remarks>
            <returns>A unique inbox string.</returns>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeSync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <remarks>
            The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.
            </remarks>
            <param name="subject">The subject on which to listen for messages. 
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeSync(System.String,System.String)">
            <summary>
            Creates a synchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message
            synchronously.</remarks>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String,System.String)">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>
            The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Flush(System.Int32)">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply, or throws
            a <see cref="T:NATS.Client.NATSTimeoutException"/> exception if the NATS Server does not reply in time.
            </summary>
            <param name="timeout">The number of milliseconds to wait.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Flush">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply.
            </summary>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.FlushBuffer">
            <summary>
            Immediately flushes the underlying connection buffer if the connection is valid.
            </summary>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Close">
            <summary>
            Closes the <see cref="T:NATS.Client.Connection"/> and all associated
            subscriptions.
            </summary>
            <seealso cref="M:NATS.Client.Connection.IsClosed"/>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="M:NATS.Client.Connection.IsClosed">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.Connection"/>
            instance is closed.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.Connection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.Connection.Close"/>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="M:NATS.Client.Connection.Drain">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.Connection.Close"/>
        </member>
        <member name="M:NATS.Client.Connection.Drain(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.Connection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
        </member>
        <member name="M:NATS.Client.Connection.DrainAsync">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.Connection.Close"/>
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.Connection.DrainAsync(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.Connection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.Connection.IsDraining">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.Connection"/>
            instance is draining.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.Connection"/> is
            draining, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IConnection.Drain"/>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="M:NATS.Client.Connection.IsReconnecting">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.Connection"/>
            is currently reconnecting.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.Connection"/> is
            reconnecting, otherwise <c>false</c>.</returns>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="P:NATS.Client.Connection.State">
            <summary>
            Gets the current state of the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <seealso cref="T:NATS.Client.ConnState"/>
        </member>
        <member name="P:NATS.Client.Connection.SubscriptionCount">
            <summary>
            Get the number of active subscriptions.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.Stats">
            <summary>
            Gets the statistics tracked for the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <seealso cref="M:NATS.Client.Connection.ResetStats"/>
        </member>
        <member name="M:NATS.Client.Connection.ResetStats">
            <summary>
            Resets the associated statistics for the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <seealso cref="P:NATS.Client.Connection.Stats"/>
        </member>
        <member name="P:NATS.Client.Connection.MaxPayload">
            <summary>
            Gets the maximum size in bytes of a payload sent
            to the connected NATS Server.
            </summary>
            <seealso cref="M:NATS.Client.Connection.Publish(NATS.Client.Msg)"/>
            <seealso cref="M:NATS.Client.Connection.Publish(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.Publish(System.String,System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:NATS.Client.Connection.ToString">
            <summary>
            Returns a string representation of the
            value of this <see cref="T:NATS.Client.Connection"/> instance.
            </summary>
            <returns>A string that represents the current instance.</returns>
        </member>
        <member name="M:NATS.Client.Connection.Dispose(System.Boolean)">
            <summary>
            Closes the connection and optionally releases the managed resources.
            </summary>
            <remarks>In derived classes, do not override the <see cref="M:NATS.Client.Connection.Close"/> method, instead
            put all of the <seealso cref="T:NATS.Client.Connection"/> cleanup logic in your Dispose override.</remarks>
            <param name="disposing"><c>true</c> to release both managed
            and unmanaged resources; <c>false</c> to release only unmanaged 
            resources.</param>
        </member>
        <member name="M:NATS.Client.Connection.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <remarks>This method disposes the connection, by clearing all pending
            operations, and closing the connection to release resources.</remarks>
        </member>
        <member name="T:NATS.Client.ConnectionFactory">
            <summary>
            Provides factory methods to create connections to NATS Servers.
            </summary>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.ConnectionFactory"/> class,
            providing factory methods to create connections to NATS Servers.
            </summary>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(System.String)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. <c>&quot;urlA, urlB&quot;</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(System.String,System.String)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/> with NATS 2.0 credentials.
            </summary>
            <remarks>
            <para><paramref name="url"/>
            Comma seperated arrays are also supported, e.g. <c>&quot;urlA, urlB&quot;</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="credentialsPath">The full path to a chained credentials file.</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(System.String,System.String,System.String)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/> with NATS 2.0 credentials.
            </summary>
            <remarks>
            <para><paramref name="url"/>
            Comma seperated arrays are also supported, e.g. <c>&quot;urlA, urlB&quot;</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="jwt">The path to a user's public JWT credentials.</param>
            <param name="privateNkey">The path to a file for user user's private Nkey seed.</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.GetDefaultOptions">
            <summary>
            Retrieves the default set of client options.
            </summary>
            <returns>The default <see cref="T:NATS.Client.Options"/> object for the NATS client.</returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateSecureConnection(System.String)">
            <summary>
            Attempt to connect to the NATS server using TLS referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. urlA, urlB.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection">
            <summary>
            Create a connection to the NATs server using the default options.
            </summary>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
            <seealso cref="M:NATS.Client.ConnectionFactory.GetDefaultOptions"/>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(NATS.Client.Options)">
            <summary>
            Create a connection to a NATS Server defined by the given options.
            </summary>
            <param name="opts">The NATS client options to use for this connection.</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection">
            <summary>
            Attempt to connect to the NATS server, with an encoded connection, using the default options.
            </summary>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <seealso cref="M:NATS.Client.ConnectionFactory.GetDefaultOptions"/>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection(System.String)">
            <summary>
            Attempt to connect to the NATS server, with an encoded connection, referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. urlA, urlB.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection(NATS.Client.Options)">
            <summary>
            Attempt to connect to the NATS server, with an encoded connection, using the given options.
            </summary>
            <param name="opts">The NATS client options to use for this connection.</param>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="T:NATS.Client.DefaultUserJWTHandler">
            <summary>
            This class is contains the default handlers for the
            <see cref="F:NATS.Client.Options.UserJWTEventHandler"/> and the 
            <see cref="F:NATS.Client.Options.UserSignatureEventHandler"/>.  This class is
            not normally used directly, but is provided to extend or use for
            utility methods to read a private seed or user JWT.
            </summary>
        </member>
        <member name="P:NATS.Client.DefaultUserJWTHandler.JwtFile">
            <summary>
            Gets the JWT file.
            </summary>
        </member>
        <member name="P:NATS.Client.DefaultUserJWTHandler.CredsFile">
            <summary>
            Gets the credentials files.
            </summary>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.#ctor(System.String,System.String)">
            <summary>
            Creates the default user jwt handler.
            </summary>
            <param name="jwtFilePath">Full path the to user JWT</param>
            <param name="credsFilePath">Full path to the user private credentials file.
            May be the same as the jwt file if they are chained.</param>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.LoadUserFromFile(System.String)">
            <summary>
            Gets a user JWT from a user JWT or chained credentials file.
            </summary>
            <param name="path">Full path to the JWT or cred file.</param>
            <returns>The encoded JWT</returns>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.LoadNkeyPairFromSeedFile(System.String)">
            <summary>
            Generates a NATS Ed25519 keypair, used to sign server nonces, from a 
            private credentials file.
            </summary>
            <param name="path">The credentials file, could be a "*.nk" or "*.creds" file.</param>
            <returns>A NATS Ed25519 KeyPair</returns>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.DefaultUserJWTEventHandler(System.Object,NATS.Client.UserJWTEventArgs)">
            <summary>
            The default User JWT Event Handler.
            </summary>
            <param name="sender">Usually the connection.</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.SignNonceFromFile(System.String,NATS.Client.UserSignatureEventArgs)">
            <summary>
            Utility method to signs the UserSignatureEventArgs server nonce from 
            a private credentials file.
            </summary>
            <param name="credsFile">A file with the private Nkey</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.DefaultUserSignatureHandler(System.Object,NATS.Client.UserSignatureEventArgs)">
            <summary>
            The default User Signature event handler.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:NATS.Client.Serializer">
            <summary>
            Represents the method that will handle serialization of <paramref name="obj"/>
            to a byte array.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="T:NATS.Client.Deserializer">
            <summary>
            Represents a method that will handle deserialization of a byte array
            into an <see cref="T:System.Object"/>.
            </summary>
            <param name="data">The byte array in a <see cref="T:NATS.Client.Msg"/> payload
            that contains the <see cref="T:System.Object"/> to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="T:NATS.Client.EncodedMessageEventArgs">
            <summary>
            Provides decoded messages received by subscriptions or requests.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Subject">
            <summary>
            Gets the subject for the received <see cref="T:NATS.Client.Msg"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Reply">
            <summary>
            Gets the reply topic for the received <see cref="T:NATS.Client.Msg"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.ReceivedObject">
            <summary>
            Gets the object decoded (deserialized) from the incoming message.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Message">
            <summary>
            Gets the original <see cref="T:NATS.Client.Msg"/> that <see cref="P:NATS.Client.EncodedMessageEventArgs.ReceivedObject"/> was deserialized from.
            </summary>
        </member>
        <member name="T:NATS.Client.EncodedConnection">
            <summary>
            Represents an <see cref="T:NATS.Client.Connection"/> which uses a client specified
            encoding scheme.
            </summary>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Publish(System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">The serialized form of <paramref name="obj"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException"><para><see cref="P:NATS.Client.EncodedConnection.OnSerialize"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para>There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</para></exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Publish(System.String,System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">The serialized form of <paramref name="obj"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException"><para><see cref="P:NATS.Client.EncodedConnection.OnSerialize"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para>There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</para></exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSException"><see cref="P:NATS.Client.EncodedConnection.OnDeserialize"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSException"><see cref="P:NATS.Client.EncodedConnection.OnDeserialize"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Request(System.String,System.Object,System.Int32)">
            <summary>
            Sends a request payload and returns the deserialized response, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.EncodedConnection.Request(System.String,System.Object,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">The serialized form of <paramref name="obj"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Request(System.String,System.Object)">
            <summary>
            Sends a request payload and returns the deserialized response.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.EncodedConnection.Request(System.String,System.Object)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">The serialized form of <paramref name="obj"/> exceeds the maximum payload size 
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="P:NATS.Client.EncodedConnection.OnSerialize">
            <summary>
            Gets or sets the method which is called to serialize
            objects sent as a message payload.
            </summary>
            <remarks>If <c>null</c> is given then the
            default serialization method for the platform is used, if one exists.</remarks>
        </member>
        <member name="P:NATS.Client.EncodedConnection.OnDeserialize">
            <summary>
            Gets or sets the method which is called to deserialize
            objects from a message payload.
            </summary>
            <remarks>If <c>null</c> is given then the
            default deserialization method for the platform is used, if one exists.</remarks>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Dispose(System.Boolean)">
            <summary>
            Closes the <see cref="T:NATS.Client.EncodedConnection"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed
            and unmanaged resources; <c>false</c> to release only unmanaged 
            resources.</param>
        </member>
        <member name="T:NATS.Client.NATSException">
            <summary>
            The exception that is thrown when there is a NATS error condition.  All
            NATS exception inherit from this class.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSConnectionException">
            <summary>
            The exception that is thrown when there is a connection error.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSReconnectBufferException">
            <summary>
            The exception that is thrown when there is an error writing
            to the internal reconnect buffer.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSProtocolException">
            <summary>
            This exception that is thrown when there is an internal error with
            the NATS protocol.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSNoServersException">
            <summary>
            The exception that is thrown when a connection cannot be made
            to any server.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSecureConnWantedException">
            <summary>
            The exception that is thrown when a secure connection is requested,
            but not required.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSecureConnRequiredException">
            <summary>
            The exception that is thrown when a secure connection is required.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSConnectionClosedException">
            <summary>
            The exception that is thrown when a an operation is performed on
            a connection that is closed.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSlowConsumerException">
            <summary>
            The exception that is thrown when a consumer (subscription) is slow.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSStaleConnectionException">
            <summary>
            The exception that is thrown when an operation occurs on a connection
            that has been determined to be stale.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSMaxPayloadException">
            <summary>
            The exception that is thrown when a message payload exceeds what
            the maximum configured.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSMaxMessagesException">
            <summary>
            The exception that is thrown when a subscriber has exceeded the maximum
            number of messages that has been configured.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSBadSubscriptionException">
            <summary>
            The exception that is thrown when a subscriber operation is performed on
            an invalid subscriber.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSTimeoutException">
            <summary>
            The exception that is thrown when a NATS operation times out.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSNotSupportedException">
            <summary>
            The exception that is thrown when a NATS operation is not supported due
            to client and server feature conflict.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSInvalidHeaderException">
            <summary>
            The exception that is thrown when a NATS header is invalid.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSConnectionDrainingException">
            <summary>
            The exception that is thrown when a NATS operation is performed on a draining connection.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSNoRespondersException">
            <summary>
            The exception thrown when the server has detected there are no responders for a request.
            </summary>
            <remarks>
            This is circuit breaking behavior from the NATS server to more quickly identify when
            a request would have timed out.
            </remarks>
        </member>
        <member name="T:NATS.Client.NATSJetStreamStatusException">
            <summary>
            The exception that is thrown when a JetStream subscription detects a unknown status
            </summary>
        </member>
        <member name="T:NATS.Client.NATSJetStreamClientException">
            <summary>
            The exception that is thrown when a client request is improper
            </summary>
        </member>
        <member name="T:NATS.Client.IAsyncSubscription">
            <summary>
            <see cref="T:NATS.Client.IAsyncSubscription"/> asynchronously delivers messages to listeners of the <see cref="E:NATS.Client.IAsyncSubscription.MessageHandler"/>
            event.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.IAsyncSubscription"/> is created without listening to the <see cref="E:NATS.Client.IAsyncSubscription.MessageHandler"/>
            event, no messages will be received until <see cref="M:NATS.Client.IAsyncSubscription.Start"/> has been called.
            </remarks>
        </member>
        <member name="E:NATS.Client.IAsyncSubscription.MessageHandler">
            <summary>
            Occurs when the <see cref="T:NATS.Client.IAsyncSubscription"/> receives a message from the
            underlying <see cref="T:NATS.Client.ISubscription"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.IAsyncSubscription.Start">
            <summary>
            Starts delivering received messages to listeners on <see cref="E:NATS.Client.IAsyncSubscription.MessageHandler"/>
            from a separate thread.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.IAsyncSubscription"/> has already started delivering messages, this
            method is a no-op.
            </remarks>
        </member>
        <member name="T:NATS.Client.IConnection">
            <summary>
            Represents a connection to the NATS server.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.Opts">
            <summary>
            Gets the configuration options for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.ClientIP">
            <summary>
            Gets the IP of client as known by the NATS server, otherwise <c>null</c>.
            </summary>
            <remarks>
            Supported in the NATS server version 2.1.6 and above.  If the client is connected to
            an older server or is in the process of connecting, null will be returned.
            </remarks>
        </member>
        <member name="P:NATS.Client.IConnection.ClientID">
            <summary>
            Gets the ID of client as known by the NATS server, otherwise <c>null</c>.
            </summary>
            <remarks>
            May not be supported in all versions of the server. If the client is connected to
            an older server or is in the process of connecting, 0 will be returned.
            </remarks>
        </member>
        <member name="P:NATS.Client.IConnection.ConnectedUrl">
            <summary>
            Gets the URL of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.ConnectedId">
            <summary>
            Gets the server ID of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.Servers">
            <summary>
            Gets an array of known server URLs for this instance.
            </summary>
            <remarks><see cref="P:NATS.Client.IConnection.Servers"/> also includes any additional
            servers discovered after a connection has been established. If
            authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IConnection.DiscoveredServers">
            <summary>
            Gets an array of server URLs that were discovered after this
            instance connected.
            </summary>
            <remarks>If authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IConnection.LastError">
            <summary>
            Gets the last <see cref="T:System.Exception"/> encountered by this instance,
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <remarks>
            <para>NATS implements a publish-subscribe message distribution model. NATS publish subscribe is a
            one-to-many communication. A publisher sends a message on a subject. Any active subscriber listening
            on that subject receives the message. Subscribers can register interest in wildcard subjects.</para>
            <para>In the basic NATS platform, if a subscriber is not listening on the subject (no subject match),
            or is not active when the message is sent, the message is not received. NATS is a fire-and-forget
            messaging system. If you need higher levels of service, you can either use NATS Streaming, or build the
            additional reliability into your client(s) yourself.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSReconnectBufferException"> is thrown when
            publishing while reconnecting and the internal reconnect buffer
            has been disabled or exceeded.</exception>
            <seealso cref="P:NATS.Client.Options.ReconnectBufferSize"></seealso>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(NATS.Client.Msg)">
            <summary>
            Publishes a <see cref="T:NATS.Client.Msg"/> instance, which includes the subject, an optional reply, and an
            optional data field.
            </summary>
            <param name="msg">A <see cref="T:NATS.Client.Msg"/> instance containing the subject, optional reply, and data to publish
            to the NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[])">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>,
            while monitoring for cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(NATS.Client.Msg)">
            <summary>
            Sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>=
            <param name="message">A <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  Any reply subject will be overridden.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Request(NATS.Client.Msg,System.Int32)">
            <summary>
            Sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  The reply subject will be overridden.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg)"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server. The reply subject will be overridden.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg)"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Int32)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS message <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server. The reply subject will be overridden.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg,System.Int32)"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  The reply subject will be overridden.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg)"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  The reply subject will be overridden.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg,System.Int32)"/>
        </member>
        <member name="M:NATS.Client.IConnection.NewInbox">
            <summary>
            Creates an inbox string which can be used for directed replies from subscribers.
            </summary>
            <remarks>
            The returned inboxes are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </remarks>
            <returns>A unique inbox string.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeSync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <remarks>
            The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.
            </remarks>
            <param name="subject">The subject on which to listen for messages. 
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeSync(System.String,System.String)">
            <summary>
            Creates a synchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message
            synchronously.</remarks>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.String)">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IConnection.Flush(System.Int32)">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply, or throws
            a <see cref="T:NATS.Client.NATSTimeoutException"/> exception if the NATS Server does not reply in time.
            </summary>
            <param name="timeout">The number of milliseconds to wait.</param>
        </member>
        <member name="M:NATS.Client.IConnection.Flush">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply.
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.FlushBuffer">
            <summary>
            Immediately flushes the underlying connection buffer if the connection is valid.
            </summary>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
        </member>
        <member name="M:NATS.Client.IConnection.Close">
            <summary>
            Closes the <see cref="T:NATS.Client.IConnection"/> and all associated
            subscriptions.
            </summary>
            <seealso cref="M:NATS.Client.IConnection.IsClosed"/>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="M:NATS.Client.IConnection.IsClosed">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            instance is closed.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="M:NATS.Client.IConnection.IsReconnecting">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            is currently reconnecting.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            reconnecting, otherwise <c>false</c>.</returns>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="P:NATS.Client.IConnection.State">
            <summary>
            Gets the current state of the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="T:NATS.Client.ConnState"/>
        </member>
        <member name="P:NATS.Client.IConnection.Stats">
            <summary>
            Gets the statistics tracked for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="M:NATS.Client.IConnection.ResetStats"/>
        </member>
        <member name="M:NATS.Client.IConnection.ResetStats">
            <summary>
            Resets the associated statistics for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="P:NATS.Client.IConnection.Stats"/>
        </member>
        <member name="P:NATS.Client.IConnection.MaxPayload">
            <summary>
            Gets the maximum size in bytes of any payload sent
            to the connected NATS Server.
            </summary>
            <seealso cref="M:NATS.Client.IConnection.Publish(NATS.Client.Msg)"/>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:NATS.Client.IConnection.DrainAsync">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.DrainAsync(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Drain">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
        </member>
        <member name="M:NATS.Client.IConnection.Drain(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
        </member>
        <member name="M:NATS.Client.IConnection.IsDraining">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            connection is draining.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="P:NATS.Client.IConnection.SubscriptionCount">
            <summary>
            Get the number of active subscriptions.
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.CreateJetStreamContext(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Gets a context for publishing and subscribing to subjects
            backed by Jetstream streams and consumers.
            </summary>
            <param name="options">Optional JetStream options.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.IConnection.CreateJetStreamManagementContext(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Gets a context for administrating JetStream.
            </summary>
            <param name="options">Optional JetStream options.</param>
            <returns></returns>
        </member>
        <member name="T:NATS.Client.IEncodedConnection">
            <summary>
            Represents a connection to a NATS Server which uses a client specified
            encoding scheme.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Opts">
            <summary>
            Gets the configuration options for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.ConnectedUrl">
            <summary>
            Gets the URL of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.ConnectedId">
            <summary>
            Gets the server ID of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Servers">
            <summary>
            Gets an array of known server URLs for this instance.
            </summary>
            <remarks><see cref="P:NATS.Client.IEncodedConnection.Servers"/> also includes any additional
            servers discovered after a connection has been established. If
            authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.DiscoveredServers">
            <summary>
            Gets an array of server URLs that were discovered after this
            instance connected.
            </summary>
            <remarks>If authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.LastError">
            <summary>
            Gets the last <see cref="T:System.Exception"/> encountered by this instance,
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Publish(System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Publish(System.String,System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object,System.Int32)">
            <summary>
            Sends a request payload and returns the deserialized response, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object)">
            <summary>
            Sends a request payload and returns the deserialized response.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.NewInbox">
            <summary>
            Creates an inbox string which can be used for directed replies from subscribers.
            </summary>
            <remarks>
            The returned inboxes are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </remarks>
            <returns>A unique inbox string.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Flush(System.Int32)">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply, or throws
            a <see cref="T:NATS.Client.NATSTimeoutException"/> exception if the NATS Server does not reply in time.
            </summary>
            <param name="timeout">The number of milliseconds to wait.</param>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Flush">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply.
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.FlushBuffer">
            <summary>
            Immediately flushes the underlying connection buffer if the connection is valid.
            </summary>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Close">
            <summary>
            Closes the <see cref="T:NATS.Client.IConnection"/> and all associated
            subscriptions.
            </summary>
            <seealso cref="M:NATS.Client.IEncodedConnection.IsClosed"/>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.IsClosed">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            instance is closed.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.IsReconnecting">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            is currently reconnecting.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            reconnecting, otherwise <c>false</c>.</returns>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.State">
            <summary>
            Gets the current state of the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="T:NATS.Client.ConnState"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Stats">
            <summary>
            Gets the statistics tracked for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="M:NATS.Client.IEncodedConnection.ResetStats"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.ResetStats">
            <summary>
            Resets the associated statistics for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="P:NATS.Client.IEncodedConnection.Stats"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.MaxPayload">
            <summary>
            Gets the maximum size in bytes of any payload sent
            to the connected NATS Server.
            </summary>
            <seealso cref="M:NATS.Client.IEncodedConnection.Publish(System.String,System.Object)"/>
            <seealso cref="M:NATS.Client.IEncodedConnection.Publish(System.String,System.String,System.Object)"/>
            <seealso cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object)"/>
            <seealso cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object,System.Int32)"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.OnSerialize">
            <summary>
            Gets or sets the method which is called to serialize
            objects sent as a message payload.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.OnDeserialize">
            <summary>
            Gets or sets the method which is called to deserialize
            objects from a message payload.
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.DrainAsync">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.DrainAsync(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Drain">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Drain(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
        </member>
        <member name="M:NATS.Client.IEncodedConnection.IsDraining">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            connection is draining.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.SubscriptionCount">
            <summary>
            Get the number of active subscriptions.
            </summary>
        </member>
        <member name="P:NATS.Client.Internals.Duration.Nanos">
            <summary>
            Gets the value of the duration in nanoseconds
            </summary>
        </member>
        <member name="P:NATS.Client.Internals.Duration.Millis">
            <summary>
            Gets the value of the duration in milliseconds, truncating any nano portion
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfNanos(System.Int64)">
            <summary>
            Create a Duration from nanoseconds
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfMillis(System.Int64)">
            <summary>
            Create a Duration from milliseconds
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfSeconds(System.Int64)">
            <summary>
            Create a Duration from seconds
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfMinutes(System.Int64)">
            <summary>
            Create a Duration from minutes
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfHours(System.Int64)">
            <summary>
            Create a Duration from hours
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfDays(System.Int64)">
            <summary>
            Create a Duration from days
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.IsZero">
            <summary>
            Is the value equal to 0
            </summary>
            <returns>true if value is 0</returns>
        </member>
        <member name="M:NATS.Client.Internals.Duration.IsNegative">
            <summary>
            Is the value negative (less than zero)
            </summary>
            <returns>true if value is negative</returns>
        </member>
        <member name="M:NATS.Client.Internals.Duration.IsPositive">
            <summary>
            Is the value positive (greater than zero)
            </summary>
            <returns>true if value is positive</returns>
        </member>
        <member name="M:NATS.Client.Internals.HeaderStatusReader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Parses for MsgHeader and MsgStatus
            </summary>
            <param name="bytes">A byte array of a serialized MsgStatus/MsgHeader class.</param>
            <param name="byteCount">Count of bytes in the serialized array.</param>
        </member>
        <member name="T:NATS.Client.Internals.InFlightRequest">
            <summary>
            Represents an in-flight request/reply operation.
            </summary>
            <remarks>
            This class is not used when using the legacy request/reply
            pattern (see <see cref="P:NATS.Client.Options.UseOldRequestStyle"/>).
            </remarks>
        </member>
        <member name="M:NATS.Client.Internals.InFlightRequest.#ctor(System.String,System.Threading.CancellationToken,System.Int32,System.Action{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:NATS.Client.Internals.InFlightRequest"/> class.
            </summary>
            <param name="id">The id associated with the request.</param>
            <param name="token">The cancellation token used to cancel the request.</param>
            <param name="timeout">A timeout (ms) after which the request is canceled.</param>
            <param name="onCompleted">The delegate that will be executed after the request ended.</param>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if the request is cancelled by <paramref name="token"/> before receiving a response.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">Thrown if the request is cancelled because <paramref name="timeout"/> period has elapsed before receiving a response.</exception>
        </member>
        <member name="M:NATS.Client.Internals.InFlightRequest.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:NATS.Client.Internals.InFlightRequest"/>
            class and invokes the <c>onCompleted</c> delegate.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.MaxPullSize">
            <summary>
            Maximum Pull Size for Pull subscriptions.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.PrefixDollarJsDot">
            <summary>
            The standard JetStream Prefix prefix 
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.PrefixApiDot">
            <summary>
            The standard JetStream Prefix suffix 
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.DefaultApiPrefix">
            <summary>
            The standard JetStream Prefix
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsAckSubjectPrefix">
            <summary>
            The standard JetStream API Prefix
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiAccountInfo">
            <summary>
            JSAPI_ACCOUNT_INFO is for obtaining general information about JetStream.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerCreate">
            <summary>
            JSAPI_CONSUMER_CREATE is used to create consumers.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiDurableCreate">
            <summary>
            JSAPI_DURABLE_CREATE is used to create durable consumers.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerInfo">
            <summary>
            JSAPI_CONSUMER_INFO is used to create consumers.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerMsgNext">
            <summary>
            JSAPI_CONSUMER_MSG_NEXT is the prefix for the request next message(s) for a consumer in worker/pull mode.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerDelete">
            <summary>
            JSAPI_CONSUMER_DELETE is used to delete consumers.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerNames">
            <summary>
            JSAPI_CONSUMER_NAMES is used to return a list of consumer names
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerList">
            <summary>
            JSAPI_CONSUMER_LIST is used to return all detailed consumer information
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamNames">
            <summary>
            JSAPI_STREAMS can lookup a stream by subject.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamCreate">
            <summary>
            JSAPI_STREAM_CREATE is the endpoint to create new streams.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamInfo">
            <summary>
            JSAPI_STREAM_INFO is the endpoint to get information on a stream.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamUpdate">
            <summary>
            JSAPI_STREAM_UPDATE is the endpoint to update existing streams.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamDelete">
            <summary>
            JSAPI_STREAM_DELETE is the endpoint to delete streams.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamPurge">
            <summary>
            JSAPI_STREAM_PURGE is the endpoint to purge streams.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamList">
            <summary>
            JSAPI_STREAM_LIST is the endpoint that will return all detailed stream information
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiMsgGet">
            <summary>
            JSAPI_MSG_GET is the endpoint to get a message.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiMsgDelete">
            <summary>
            JSAPI_MSG_DELETE is the endpoint to remove a message.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.MsgIdHeader">
            <summary>
            JetStream expected message ID header name.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.ExpStreamHeader">
            <summary>
            JetStream expected stream header name.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.ExpLastSeqHeader">
            <summary>
            JetStream expected last sequence header name.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.ExpLastIdHeader">
            <summary>
            JetStream expected last message ID header Name.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.ExpLastSubjectSeqHeader">
            <summary>
            JetStream expected last sequence header name.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.NatsConstants.NoRespondersCode">
            <summary>
            No Responders Status code, 503.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.NatsConstants.NotFoundCode">
            <summary>
            Not Found Status code, 404.
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Nuid.#ctor(System.Security.Cryptography.RandomNumberGenerator,System.Nullable{System.UInt64},System.Nullable{System.UInt32})">
            <summary>
            Initializes a new instance of <see cref="T:NATS.Client.Internals.Nuid"/>.
            </summary>
            <remarks>
            This constructor is intended to be used from unit tests and
            benchmarks only. For production use use <see cref="M:NATS.Client.Internals.Nuid.#ctor"/> instead.
            </remarks>
            <param name="rng">A cryptographically strong random number generator.</param>
            <param name="sequential">The initial sequential.</param>
            <param name="increment">The initial increment.</param>
        </member>
        <member name="M:NATS.Client.Internals.Nuid.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NATS.Client.Internals.Nuid"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Nuid.GetNext">
            <summary>
            Returns a random Nuid string.
            </summary>
            <remarks>
            A Nuid is a 132 bit pseudo-random integer encoded as a base64 string
            </remarks>
            <returns>The Nuid</returns>
        </member>
        <member name="T:NATS.Client.IStatistics">
            <summary>
            Tracks various statistics received and sent on an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.InMsgs">
            <summary>
            Gets the number of inbound messages received.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.OutMsgs">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.InBytes">
            <summary>
            Gets the number of incoming bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.OutBytes">
            <summary>
            Gets the outgoing number of bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.Reconnects">
            <summary>
            Gets the number of reconnections.
            </summary>
        </member>
        <member name="T:NATS.Client.ISubscription">
            <summary>
            Represents interest in a NATS topic.
            </summary>
            <remarks>
            <para>Subscriptions represent interest in a topic on a NATS Server or cluster of
            NATS Servers. Subscriptions can be exact or include wildcards. A subscriber can
            process a NATS message synchronously (<see cref="T:NATS.Client.ISyncSubscription"/>) or asynchronously
            (<see cref="T:NATS.Client.IAsyncSubscription"/>).</para>
            </remarks>
            <seealso cref="T:NATS.Client.ISyncSubscription"/>
            <seealso cref="T:NATS.Client.IAsyncSubscription"/>
        </member>
        <member name="P:NATS.Client.ISubscription.Sid">
            <summary>
            the id associated with the subscription, used by the connection when processing an incoming
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Subject">
            <summary>
            Gets the subject for this subscription.
            </summary>
            <remarks><para>Subject names, including reply subject (INBOX) names, are case-sensitive
            and must be non-empty alphanumeric strings with no embedded whitespace, and optionally
            token-delimited using the dot character (<c>.</c>), e.g.: <c>FOO</c>, <c>BAR</c>,
            <c>foo.BAR</c>, <c>FOO.BAR</c>, and <c>FOO.BAR.BAZ</c> are all valid subject names, while:
            <c>FOO. BAR</c>, <c>foo. .bar</c> and <c>foo..bar</c> are <em>not</em> valid subject names.</para>
            <para>NATS supports the use of wildcards in subject subscriptions.</para>
            <list>
            <item>The asterisk character (<c>*</c>) matches any token at any level of the subject.</item>
            <item>The greater than symbol (<c>&gt;</c>), also known as the <em>full wildcard</em>, matches
            one or more tokens at the tail of a subject, and must be the last token. The wildcard subject
            <c>foo.&gt;</c> will match <c>foo.bar</c> or <c>foo.bar.baz.1</c>, but not <c>foo</c>.</item>
            <item>Wildcards must be separate tokens (<c>foo.*.bar</c> or <c>foo.&gt;</c> are syntactically
            valid; <c>foo*.bar</c>, <c>f*o.b*r</c> and <c>foo&gt;</c> are not).</item>
            </list>
            <para>For example, the wildcard subscriptions <c>foo.*.quux</c> and <c>foo.&gt;</c> both match
            <c>foo.bar.quux</c>, but only the latter matches <c>foo.bar.baz</c>. With the full wildcard,
            it is also possible to express interest in every subject that may exist in NATS (<c>&gt;</c>).</para>
            </remarks>
        </member>
        <member name="P:NATS.Client.ISubscription.Queue">
            <summary>
            Gets the optional queue group name.
            </summary>
            <remarks>
            <para>If present, all subscriptions with the same name will form a distributed queue, and each message will only
            be processed by one member of the group. Although queue groups have multiple subscribers,
            each message is consumed by only one.</para>
            </remarks>
        </member>
        <member name="P:NATS.Client.ISubscription.Connection">
            <summary>
            Gets the <see cref="T:NATS.Client.Connection"/> associated with this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.IsValid">
            <summary>
            Gets a value indicating whether or not the <see cref="T:NATS.Client.ISubscription"/> is still valid.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.Unsubscribe">
            <summary>
            Removes interest in the <see cref="P:NATS.Client.ISubscription.Subject"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)">
            <summary>
            Issues an automatic call to <see cref="M:NATS.Client.ISubscription.Unsubscribe"/> when <paramref name="max"/> messages have been
            received.
            </summary>
            <remarks>This can be useful when sending a request to an unknown number of subscribers.
            <see cref="P:NATS.Client.ISubscription.Connection"/>'s Request methods use this functionality.</remarks>
            <param name="max">The maximum number of messages to receive on the subscription before calling
            <see cref="M:NATS.Client.ISubscription.Unsubscribe"/>. Values less than or equal to zero (<c>0</c>) unsubscribe immediately.</param>
        </member>
        <member name="P:NATS.Client.ISubscription.QueuedMessageCount">
            <summary>
            Gets the number of messages remaining in the delivery queue.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.SetPendingLimits(System.Int64,System.Int64)">
            <summary>
            Sets the limits for pending messages and bytes for this instance.
            </summary>
            <remarks>Zero (<c>0</c>) is not allowed. Negative values indicate that the
            given metric is not limited.</remarks>
            <param name="messageLimit">The maximum number of pending messages.</param>
            <param name="bytesLimit">The maximum number of pending bytes of payload.</param>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingByteLimit">
            <summary>
            Gets or sets the maximum allowed count of pending bytes.
            </summary>
            <value>The limit must not be zero (<c>0</c>). Negative values indicate there is no
            limit on the number of pending bytes.</value>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingMessageLimit">
            <summary>
            Gets or sets the maximum allowed count of pending messages.
            </summary>
            <value>The limit must not be zero (<c>0</c>). Negative values indicate there is no
            limit on the number of pending messages.</value>
        </member>
        <member name="M:NATS.Client.ISubscription.GetPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the pending byte and message counts.
            </summary>
            <param name="pendingBytes">When this method returns, <paramref name="pendingBytes"/> will
            contain the count of bytes not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
            <param name="pendingMessages">When this method returns, <paramref name="pendingMessages"/> will
            contain the count of messages not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingBytes">
            <summary>
            Gets the number of bytes not yet processed on this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingMessages">
            <summary>
            Gets the number of messages not yet processed on this instance.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.GetMaxPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the maximum number of pending bytes and messages during the life of the <see cref="T:NATS.Client.Subscription"/>.
            </summary>
            <param name="maxPendingBytes">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending bytes.</param>
            <param name="maxPendingMessages">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending messages.</param>
        </member>
        <member name="P:NATS.Client.ISubscription.MaxPendingBytes">
            <summary>
            Gets the maximum number of pending bytes seen so far by this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.MaxPendingMessages">
            <summary>
            Gets the maximum number of messages seen so far by this instance.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.ClearMaxPending">
            <summary>
            Clears the maximum pending bytes and messages statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Delivered">
            <summary>
            Gets the number of delivered messages for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Dropped">
            <summary>
            Gets the number of known dropped messages for this instance.
            </summary>
            <remarks>
            This will correspond to the messages dropped by violations of
            <see cref="P:NATS.Client.ISubscription.PendingByteLimit"/> and/or <see cref="P:NATS.Client.ISubscription.PendingMessageLimit"/>.
            If the NATS server declares the connection a slow consumer, the count
            may not be accurate.
            </remarks>
        </member>
        <member name="M:NATS.Client.ISubscription.Drain">
            <summary>
            Drains a subscription for gracefully unsubscribing.
            </summary>
            <remarks>
            This method unsubscribes the subscriber and drains all
            remaining messages.
            </remarks>
            <seealso cref="M:NATS.Client.ISubscription.Unsubscribe"/>
        </member>
        <member name="M:NATS.Client.ISubscription.Drain(System.Int32)">
            <summary>
            Drains a subscription for gracefully unsubscribing.
            </summary>
            <param name="timeout">The duration in milliseconds to wait while draining.</param>    
            /// <seealso cref="M:NATS.Client.ISubscription.Unsubscribe"/>
        </member>
        <member name="M:NATS.Client.ISubscription.DrainAsync">
            <summary>
            Drains a subscription for gracefully unsubscribing.
            </summary>
            <remarks>
            This method unsubscribes the subscriber and drains all
            remaining messages.
            </remarks>
            <seealso cref="M:NATS.Client.ISubscription.Unsubscribe"/>
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.ISubscription.DrainAsync(System.Int32)">
            <summary>
            Drains a subscription for gracefully unsubscribing.
            </summary>
            <param name="timeout">The duration in milliseconds to wait while draining.</param>    
            /// <seealso cref="M:NATS.Client.ISubscription.Unsubscribe"/>
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="T:NATS.Client.ISyncSubscription">
            <summary>
            <see cref="T:NATS.Client.ISyncSubscription"/> provides messages for a subject through calls
            to <see cref="M:NATS.Client.ISyncSubscription.NextMessage"/> and <see cref="M:NATS.Client.ISyncSubscription.NextMessage(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.ISyncSubscription.NextMessage">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, blocking until one is available.
            </summary>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
        </member>
        <member name="M:NATS.Client.ISyncSubscription.NextMessage(System.Int32)">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, or block up to a given timeout until the next one is available.
            timeout less than zero means block until a message is available
            </summary>
            <param name="timeout">The amount of time, in milliseconds, to wait for
            the next message.</param>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithDescription(System.String)">
            <summary>
            Sets the description.
            </summary>
            <param name="description">the description</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithDurable(System.String)">
            <summary>
            Sets the name of the durable subscription.
            </summary>
            <param name="durable">name of the durable subscription.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithDeliverPolicy(System.Nullable{NATS.Client.JetStream.DeliverPolicy})">
            <summary>
            Sets the delivery policy of the ConsumerConfiguration.
            </summary>
            <param name="policy">the delivery policy.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithDeliverSubject(System.String)">
            <summary>
            Sets the subject to deliver messages to.
            </summary>
            <param name="deliverSubject">the delivery subject.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithDeliverGroup(System.String)">
            <summary>
            Sets the group to deliver messages to.
            </summary>
            <param name="group">the delivery group.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithStartSequence(System.Nullable{System.UInt64})">
            <summary>
            Sets the start sequence of the ConsumerConfiguration.
            </summary>
            <param name="sequence">the start sequence</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithStartTime(System.DateTime)">
            <summary>
            Sets the start time of the ConsumerConfiguration.
            </summary>
            <param name="startTime">the start time</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithAckPolicy(System.Nullable{NATS.Client.JetStream.AckPolicy})">
            <summary>
            Sets the acknowledgement policy of the ConsumerConfiguration.
            </summary>
            <param name="policy">the acknowledgement policy.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithAckWait(NATS.Client.Internals.Duration)">
            <summary>
            Sets the acknowledgement wait duration of the ConsumerConfiguration.
            </summary>
            <param name="timeout">the wait timeout as a duration</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithAckWait(System.Int64)">
            <summary>
            Sets the acknowledgement wait duration of the ConsumerConfiguration.
            </summary>
            <param name="timeoutMillis">the wait timeout as millis</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMaxDeliver(System.Nullable{System.Int64})">
            <summary>
            Sets the maximum delivery amount of the ConsumerConfiguration.
            </summary>
            <param name="maxDeliver">the maximum delivery amount</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithFilterSubject(System.String)">
            <summary>
            Sets the filter subject of the ConsumerConfiguration.
            </summary>
            <param name="filterSubject">the filter subject</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithReplayPolicy(System.Nullable{NATS.Client.JetStream.ReplayPolicy})">
            <summary>
            Sets the replay policy of the ConsumerConfiguration.
            </summary>
            <param name="policy">the replay policy.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithSampleFrequency(System.String)">
            <summary>
            Sets the sample frequency of the ConsumerConfiguration.
            </summary>
            <param name="frequency">the frequency</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithRateLimit(System.Nullable{System.Int64})">
            <summary>
            Set the rate limit of the ConsumerConfiguration.
            </summary>
            <param name="msgsPerSecond">messages per second to deliver</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMaxAckPending(System.Nullable{System.Int64})">
            <summary>
            Sets the maximum ack pending.
            </summary>
            <param name="maxAckPending">maximum pending acknowledgements.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithIdleHeartbeat(NATS.Client.Internals.Duration)">
            <summary>
            Sets the idle heart beat wait time.
            </summary>
            <param name="idleHeartbeat">the wait timeout as a Duration</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithIdleHeartbeat(System.Int64)">
            <summary>
            Sets the idle heart beat wait time.
            </summary>
            <param name="idleHeartbeatMillis">the wait timeout as milliseconds</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithFlowControl(NATS.Client.Internals.Duration)">
            <summary>
            Set the flow control on and set the idle heartbeat
            </summary>
            <param name="idleHeartbeat">the idle heart beat as a Duration</param>
            <returns>The ConsumerConfiguration</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithFlowControl(System.Int64)">
            <summary>
            Set the flow control on and set the idle heartbeat
            </summary>
            <param name="idleHeartbeatMillis">the idle heart beat as milliseconds</param>
            <returns>The ConsumerConfiguration</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMaxPullWaiting(System.Nullable{System.Int64})">
            <summary>
            Sets the maximum pull waiting.
            </summary>
            <param name="maxPullWaiting">the maximum delivery amount</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithHeadersOnly(System.Nullable{System.Boolean})">
            <summary>
            Sets the headers only flag
            </summary>
            <param name="headersOnly">true to enable flow control.</param>
            <returns>The ConsumerConfiguration</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.Build">
            <summary>
            Builds the ConsumerConfiguration
            </summary>
            <returns>The ConsumerConfiguration</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.BuildPushSubscribeOptions">
            <summary>
            Builds the PushSubscribeOptions with this configuration
            </summary>
            <returns>The PushSubscribeOptions</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.BuildPullSubscribeOptions">
            <summary>
            Builds the PullSubscribeOptions with this configuration
            </summary>
            <returns>The PullSubscribeOptions</returns>
        </member>
        <member name="T:NATS.Client.JetStream.IJetStream">
            <summary>
            This is the JetStream context for creation and access to persistent
            streams and consumers.
            </summary>
            <remarks>
            A JetStream context is created by the IConnect.JetStreamContext() API.
            </remarks>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.Publish(System.String,System.Byte[])">
            <summary>
            Send a message to the specified subject and waits for a response
            from Jetstream. The message body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream()
            js.Publish("destination", "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.Publish(System.String,System.Byte[],NATS.Client.JetStream.PublishOptions)">
            <summary>
            Send a message to the specified subject and waits for a response
            from Jetstream. The message body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream
            js.Publish("destination", "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="publishOptions">Options for publishing.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.Publish(NATS.Client.Msg)">
            <summary>
            Send a message and waits for a response from JetStream.
            </summary>
            <param name="message">A <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  Any reply subject will be ignored.</param>
            <returns>A publish acknowledgement</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.Publish(NATS.Client.Msg,NATS.Client.JetStream.PublishOptions)">
            <summary>
            Send a message and waits for a response from JetStream.
            </summary>
            <param name="message">A <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  Any reply subject will be ignored.</param>
            <param name="publishOptions">Options for publishing.</param>
            <returns>A publish acknowledgement.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PublishAsync(System.String,System.Byte[])">
            <summary>
            Asynchronously sends a message to the specified subject and waits for a response
            from Jetstream. The message body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream()
            js.Publish("destination", "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PublishAsync(System.String,System.Byte[],NATS.Client.JetStream.PublishOptions)">
            <summary>
            Asynchronously sends data to the specified subject. The message
            body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream
            js.Publish("destination", "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="publishOptions">Options for publishing.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PublishAsync(NATS.Client.Msg)">
            FIX Comments for rest of async
            <summary>
            Asynchronously sends a message to JetStream.
            </summary>
            <param name="message">A <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  Any reply subject will be ignored.</param>
            <returns>A publish acknowledgement</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PublishAsync(NATS.Client.Msg,NATS.Client.JetStream.PublishOptions)">
            <summary>
            Asynchronously sends a message to JetStream with options.
            </summary>
            <param name="message">A <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  Any reply subject will be ignored.</param>
            <param name="publishOptions">Options for publishing.</param>
            <returns>A publish acknowledgement.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PullSubscribe(System.String,NATS.Client.JetStream.PullSubscribeOptions)">
            <summary>
            Creates a JetStream pull subscription.  Pull subscriptions fetch messages
            from the server in batches.
            </summary>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="options">Pull Subscribe options for this subscription.</param>
            <returns>An IJetStreamPullSubscription</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs},System.Boolean)">
            <summary>
            Creates a push subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.JetStream.IJetStreamSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <param name="autoAck">Whether or not to auto ack the message</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <returns>A JetStream push subscription</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs},System.Boolean,NATS.Client.JetStream.PushSubscribeOptions)">
            <summary>
            Creates a push subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.JetStream.IJetStreamSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.JetStream.IJetStreamPushAsyncSubscription"/>.</param>
            <param name="autoAck">Whether or not to auto ack the message</param>
            <param name="options">Pull Subscribe options for this subscription.</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs},System.Boolean)">
            <summary>
            Creates an subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.JetStream.IJetStreamSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <param name="autoAck">Whether or not to auto ack the message</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
            <returns>An IJetStreamPushAsyncSubscription</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs},System.Boolean,NATS.Client.JetStream.PushSubscribeOptions)">
            <summary>
            Creates an subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.JetStream.IJetStreamSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
            <param name="autoAck">Whether or not to auto ack the message</param>
            <param name="options">JetStream push subscription options.</param>
            <returns>An IJetStreamPushAsyncSubscription</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeSync(System.String)">
            <summary>
            Creates a synchronous JetStream subscriber on the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject on which to listen for messages.</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushSyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeSync(System.String,NATS.Client.JetStream.PushSubscribeOptions)">
            <summary>
            Creates a synchronous JetStream subscriber on the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="options">JetStream subscription options.</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushSyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeSync(System.String,System.String)">
            <summary>
            Creates a synchronous JetStream queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message
            synchronously.</remarks>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushSyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeSync(System.String,System.String,NATS.Client.JetStream.PushSubscribeOptions)">
            <summary>
            Creates a synchronous JetStream queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message
            synchronously.</remarks>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="options">JetStream subscription options.</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushSyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="T:NATS.Client.JetStream.IJetStreamManagement">
            <summary>
            This is the JetStream management API to programatically create, delete,
            and update various JetStream objects.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetAccountStatistics">
            <summary>
            Gets the account statistics for the logged in account.
            <returns>account statistics</returns>
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.AddStream(NATS.Client.JetStream.StreamConfiguration)">
            <summary>
            Loads or creates a stream.
            </summary>
            <param name="config">The stream configuration to use.</param>
            <returns>Stream information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.UpdateStream(NATS.Client.JetStream.StreamConfiguration)">
            <summary>
            Updates an existing stream.
            </summary>
            <param name="config">The stream configuration to use.</param>
            <returns>Stream information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.DeleteStream(System.String)">
            <summary>
            Deletes an existing stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>true if the delete succeeded</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetStreamInfo(System.String)">
            <summary>
            Get information about a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>Stream information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.PurgeStream(System.String)">
            <summary>
            Purges all messages in a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>The result of the purge.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.PurgeStream(System.String,NATS.Client.JetStream.PurgeOptions)">
            <summary>
            Purges all messages in a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="options">The purge options.</param>
            <returns>The result of the purge.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.AddOrUpdateConsumer(System.String,NATS.Client.JetStream.ConsumerConfiguration)">
            <summary>
            Adds or updates a consumer.
            </summary>
            <param name="streamName">The name of the stream the consumer is attached to.</param>
            <param name="config">The consumer configuration to use.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.DeleteConsumer(System.String,System.String)">
            <summary>
            Deletes a consumer.
            </summary>
            <param name="streamName">The name of the stream the consumer is attached to.</param>
            <param name="consumer">The name of the consumer.</param>
            <returns>True if the consumer was deleted.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetConsumerInfo(System.String,System.String)">
            <summary>
            Gets information for an existing consumer.
            </summary>
            <param name="streamName">The name of the stream the consumer is attached to.</param>
            <param name="consumer">The name of the consumer.</param>
            <returns>Consumer information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetConsumerNames(System.String)">
            <summary>
            Gets all consumers attached to a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>An array of consumer names.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetConsumers(System.String)">
            <summary>
            Get consumer information for all consumers on a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>An array of consumer information objects.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetStreamNames">
            <summary>
            Gets the names of all streams.
            </summary>
            <returns>An array of stream names.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetStreams">
            <summary>
            Gets stream information about all streams.
            </summary>
            <returns>An array of stream information objects.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetMessage(System.String,System.UInt64)">
            <summary>
            Gets information about a message in a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="sequence">The stream sequence number of the message.</param>
            <returns>Message information.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.DeleteMessage(System.String,System.UInt64)">
            <summary>
            Permanantly deletes a message from a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="sequence">The stream sequence number of the message.</param>
            <returns>True if the message was deleted.</returns>
        </member>
        <member name="P:NATS.Client.JetStream.IJetStreamSubscription.Context">
            <summary>
            The JetStream Context
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.IJetStreamSubscription.Stream">
            <summary>
            The Stream Name
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.IJetStreamSubscription.Consumer">
            <summary>
            The Consumer Name
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.IJetStreamSubscription.DeliverSubject">
            <summary>
            The Deliver Subject
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamSubscription.GetConsumerInformation">
            <summary>
            Gets the ConsumerInformation for this Subscription.
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.IJetStreamPullSubscription">
            <summary>
            Pull Subscription on a JetStream context.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamPullSubscription.Pull(System.Int32)">
             <summary>
             Polls for new messages, overriding the default batch size for this pull only.
             </summary>
             <remarks>
             When true a response with a 404 status header will be returned
             when no messages are available.
            
             Primitive API for Advanced use only. Prefer Fetch 
             </remarks>
             <param name="batchSize">the size of the batch</param>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamPullSubscription.PullNoWait(System.Int32)">
             <summary>
             Do a pull in noWait mode with the specified batch size.
             </summary>
             <remarks>
             When true a response with a 404 status header will be returned
             when no messages are available.
            
             Primitive API for Advanced use only. Prefer Fetch 
             </remarks>
             <param name="batchSize">the size of the batch</param>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamPullSubscription.PullExpiresIn(System.Int32,System.Int32)">
             <summary>
             Initiate pull for all messages available before expiration.
             </summary>
             <remarks>
             Multiple 408 status messages may come. Each one indicates a
             missing item from the previous batch and can be discarded.
            
             Primitive API for Advanced use only. Prefer Fetch 
             </remarks>
             <param name="batchSize">the size of the batch</param>
             <param name="expiresInMillis">how long from now the server should expire this request</param>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamPullSubscription.Fetch(System.Int32,System.Int32)">
            <summary>
            Fetch a list of messages up to the batch size, waiting no longer than maxWait.
            </summary>
            <remarks>
            This uses <code>pullExpiresIn</code> under the covers, and manages all responses
            from<code> sub.NextMessage(...)</code> to only return regular JetStream messages.
            </remarks>
            <param name="batchSize">the size of the batch</param>
            <param name="maxWaitMillis">The maximum time to wait for the first message.</param>
            <returns></returns>
        </member>
        <member name="T:NATS.Client.JetStream.NATSJetStreamException">
            <summary>
            The exception thrown when there is an error with JetStream.
            </summary>
        </member>
        <member name="F:NATS.Client.JetStream.NATSJetStreamException.ErrorCodeUnspecified">
            <summary>
            Unspecified error code.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.NATSJetStreamException.ErrorCode">
            <summary>
            Gets the error code returned by JetStream.  Returns ErrorCodeUnspecified
            if the error is local.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.NATSJetStreamException.ApiErrorCode">
            <summary>
            Gets the error code returned by JetStream.  Returns ErrorCodeUnspecified
            if the error is local.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.NATSJetStreamException.ErrorDescription">
            <summary>
            Returns the description of the error.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.NATSJetStreamException.#ctor(NATS.Client.JetStream.ApiResponse)">
            <summary>
            Construct a NATSJetStreamException from an ApiResponse that is an Error
            </summary>
            <param name="apiResponse"></param>
        </member>
        <member name="M:NATS.Client.JetStream.NATSJetStreamException.#ctor(System.String)">
            <summary>
            Construct a NATSJetStreamException from a string.
            </summary>
            <param name="s">The exception message.</param>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamMsg.MetaData">
            <summary>
            Gets the metadata associated with a JetStream message.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.Ack">
            <summary>
            Acknowledges a JetStream messages received from a Consumer,
            indicating the message will not be resent.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.AckSync(System.Int32)">
            <summary>
            Acknowledges a JetStream messages received from a Consumer,
            indicating the message should not be received again later.
            A timeout of zero does not confirm the acknowledgement.
            </summary>
            <param name="timeout">the duration to wait for an ack in milliseconds
            confirmation</param>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.Nak">
            <summary>
            Acknowledges a JetStream message has been received but indicates
            that the message is not completely processed and should be sent
            again later.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.Term">
            <summary>
            Prevents this message from ever being delivered regardless of
            maxDeliverCount.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.InProgress">
            <summary>
            Indicates that this message is being worked on and reset redelivery timer in the server.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamMsg.IsJetStream">
            <summary>
            Checks if a message is from JetStream or is a standard message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamMsg.Reply">
            <summary>
            A JetStream message does not have a reply that is presented
            to the application.
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.MetaData">
            <summary>
            JetStream message MetaData
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.Prefix">
            <summary>
            Gets the prefix.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.Stream">
            <summary>
            Gets the stream name.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.Domain">
            <summary>
            Gets the domain name.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.Consumer">
            <summary>
            Gets the consumer name.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.NumDelivered">
            <summary>
            Number of delivered messages
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.StreamSequence">
            <summary>
            Gets the Stream sequence number.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.ConsumerSequence">
            <summary>
            Gets the Consumer sequence number.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.Timestamp">
            <summary>
            Gets the timestamp of the message.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.TimestampNanos">
            <summary>
            Gets the raw nanosecond timestamp of the message.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.NumPending">
            <summary>
            Number of pending messages
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamOptions.Prefix">
            <summary>
            Gets the prefix.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamOptions.RequestTimeout">
            <summary>
            Gets the request timeout
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamOptions.IsPublishNoAck">
            <summary>
            Gets is publish should be done in no ack (core) style
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.Builder">
            <summary>
            Gets the JetStreamOptions builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.Builder(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Gets the JetStreamOptions builder based on an existing JetStreamOptions object.
            </summary>
            <param name="jso">an existing JetStreamOptions object</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.#ctor">
            <summary>
            Construct a builder
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.#ctor(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Construct a builder from an existing JetStreamOptions object
            </summary>
            <param name="jso">an existing JetStreamOptions object</param>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithPrefix(System.String)">
            <summary>
            Sets the prefix for JetStream subjects. A prefix can be used in conjunction with
            user permissions to restrict access to certain JetStream instances.  This must
            match the prefix used in the server.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithDomain(System.String)">
            <summary>
            Sets the domain for JetStream subjects. A domain can be used in conjunction with
            user permissions to restrict access to certain JetStream instances.  This must
            match the domain used in the server.
            </summary>
            <param name="domain">The domain.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithRequestTimeout(NATS.Client.Internals.Duration)">
            <summary>
            Sets the request timeout
            </summary>
            <param name="requestTimeout">The request timeout as Duration.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithRequestTimeout(System.Int64)">
            <summary>
            Sets the request timeout
            </summary>
            <param name="requestTimeoutMillis">The request timeout in millis.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithPublishNoAck(System.Boolean)">
            <summary>
            Sets the Publish No Ack Flag
            </summary>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.Build">
            <summary>
            Builds the JetStreamOptions
            </summary>
            <returns>The JetStreamOptions object.</returns>
        </member>
        <member name="F:NATS.Client.JetStream.PublishOptions.DefaultTimeout">
            <summary>
            The default timeout (2000ms)
            </summary>
        </member>
        <member name="F:NATS.Client.JetStream.PublishOptions.DefaultStream">
            <summary>
            The default stream name (unset)
            </summary>
        </member>
        <member name="F:NATS.Client.JetStream.PublishOptions.DefaultLastSequence">
            <summary>
            Default Last Sequence Number (unset)
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.Stream">
            <summary>
            The stream name.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.StreamTimeout">
            <summary>
            The stream timeout.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.ExpectedStream">
            <summary>
            The Expected Stream.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.ExpectedLastMsgId">
            <summary>
            The Expected Last Message Id.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.ExpectedLastSeq">
            <summary>
            The Expected Last Sequence.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.ExpectedLastSubjectSeq">
            <summary>
            The Expected Last Sequence.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.MessageId">
            <summary>
            The Expected Message Id.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.Builder">
            <summary>
            Gets the publish options builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="T:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder">
            <summary>
            The PublishOptionsBuilder builds PublishOptions
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithStream(System.String)">
            <summary>
            Set the stream name.
            </summary>
            <param name="stream">Name of the stream</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithTimeout(NATS.Client.Internals.Duration)">
            <summary>
            Set the stream timeout with a Duration
            </summary>
            <param name="timeout">The publish acknowledgement timeout as a Duration.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithTimeout(System.Int64)">
            <summary>
            Set the stream timeout in milliseconds
            </summary>
            <param name="timeoutMillis">The publish acknowledgement timeout as millis</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithMessageId(System.String)">
            <summary>
            Set the message id.
            </summary>
            <param name="msgId">The message ID of these options.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithExpectedStream(System.String)">
            <summary>
            Set the expected stream name.
            </summary>
            <param name="stream">The expected stream name.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithExpectedLastMsgId(System.String)">
            <summary>
            Set the expected last message ID.
            </summary>
            <param name="lastMessageId">The expected last message ID.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithExpectedLastSequence(System.UInt64)">
            <summary>
            Set the expected sequence.
            </summary>
            <param name="sequence">The expected sequence.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithExpectedLastSubjectSequence(System.UInt64)">
            <summary>
            Set the expected subject sequence.
            </summary>
            <param name="sequence">The expected subject sequence.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.ClearExpected">
            <summary>
            Clears the expected so the build can be re-used.
            Clears the expectedLastId, expectedLastSequence and messageId fields.
            </summary>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.Build">
            <summary>
            Builds the PublishOptions
            </summary>
            <returns>The PublishOptions object.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullSubscribeOptions.BindTo(System.String,System.String)">
            <summary>
            Create PushSubscribeOptions where you are binding to
            a specific stream, specific durable and are using bind mode
            </summary>
            <param name="stream">the stream name to bind to</param>
            <param name="durable">the durable name</param>
            <returns>the PushSubscribeOptions</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullSubscribeOptions.Builder">
            <summary>
            Gets the PullSubscribeOptions builder.
            </summary>
            <returns>The PullSubscribeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullSubscribeOptions.PullSubscribeOptionsSubscribeOptionsBuilder.Build">
            <summary>
            Builds the PullSubscribeOptions
            </summary>
            <returns>The PullSubscribeOptions object.</returns>
        </member>
        <member name="P:NATS.Client.JetStream.PurgeOptions.Subject">
            <summary>
            The subject to purge
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PurgeOptions.Sequence">
            <summary>
            The upper-bound sequence for messages to be deleted
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PurgeOptions.Keep">
            <summary>
            The max number of messages to keep
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.Builder">
            <summary>
            Gets the purge options builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.WithSubject(System.String)">
            <summary>
            Gets the purge options with a subject.
            </summary>
            <returns>
            The purge options
            </returns>
        </member>
        <member name="T:NATS.Client.JetStream.PurgeOptions.PurgeOptionsBuilder">
            <summary>
            The PurgeOptionsBuilder builds PurgeOptions
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.PurgeOptionsBuilder.WithSubject(System.String)">
            <summary>
            Set the subject to filter the purge. Wildcards allowed.
            </summary>
            <param name="subject">The subject</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.PurgeOptionsBuilder.WithSequence(System.UInt64)">
            <summary>
            Set upper-bound sequence for messages to be deleted
            </summary>
            <param name="sequence">The upper-bound sequence.</param>
            <returns>The PurgeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.PurgeOptionsBuilder.WithKeep(System.UInt64)">
            <summary>
            Set the max number of messages to keep.
            </summary>
            <param name="keep">The max number of messages to keep.</param>
            <returns>The PurgeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.PurgeOptionsBuilder.Build">
            <summary>
            Builds the PurgeOptions
            </summary>
            <returns>The PurgeOptions object.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.ForStream(System.String)">
            <summary>
            Create PushSubscribeOptions where you are binding to
            a specific stream, which could be a stream or a mirror
            </summary>
            <param name="stream">the stream name to bind to</param>
            <returns>the PushSubscribeOptions</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.BindTo(System.String,System.String)">
            <summary>
            Create PushSubscribeOptions where you are binding to
            a specific stream, specific durable and are using bind to mode
            </summary>
            <param name="stream">the stream name to bind to</param>
            <param name="durable">the durable name</param>
            <returns>the PushSubscribeOptions</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.Builder">
            <summary>
            Gets the PushSubscribeOptions builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.PushSubscribeOptionsBuilder.WithDeliverSubject(System.String)">
            <summary>
            Set the deliver subject 
            </summary>
            <param name="deliverSubject">the deliver subject value</param>
            <returns>The PushSubscribeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.PushSubscribeOptionsBuilder.WithDeliverGroup(System.String)">
            <summary>
            Set the deliver group 
            </summary>
            <param name="deliverGroup">the deliver group value</param>
            <returns>The PushSubscribeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.PushSubscribeOptionsBuilder.Build">
            <summary>
            Builds the PushSubscribeOptions
            </summary>
            <returns>The PushSubscribeOptions object.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithName(System.String)">
            <summary>
            Sets the name of the stream.
            </summary>
            <param name="name">name of the stream.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDescription(System.String)">
            <summary>
            Sets the description.
            </summary>
            <param name="description">the description</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithSubjects(System.String[])">
            <summary>
            Sets the subjects in the StreamConfiguration.
            </summary>
            <param name="subjects">the stream's subjects</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithSubjects(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the subjects in the StreamConfiguration.
            </summary>
            <param name="subjects">the stream's subjects</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.AddSubjects(System.String[])">
            <summary>
            Add the subjects in the StreamConfiguration.
            </summary>
            <param name="subjects">the stream's subjects</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.AddSubjects(System.Collections.Generic.List{System.String})">
            <summary>
            Add the subjects in the StreamConfiguration.
            </summary>
            <param name="subjects">the stream's subjects</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithRetentionPolicy(System.Nullable{NATS.Client.JetStream.RetentionPolicy})">
            <summary>
            Sets the retention policy in the StreamConfiguration.
            </summary>
            <param name="policy">the retention policy of the StreamConfiguration</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxConsumers(System.Int64)">
            <summary>
            Sets the maximum number of consumers in the StreamConfiguration.
            </summary>
            <param name="maxConsumers">the maximum number of consumers</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxMessages(System.Int64)">
            <summary>
            Sets the maximum number of messages in the StreamConfiguration.
            </summary>
            <param name="maxMsgs">the maximum number of messages</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxMessagesPerSubject(System.Int64)">
            <summary>
            Sets the maximum number of message per subject in the StreamConfiguration.
            </summary>
            <param name="maxMsgsPerSubject">the maximum number of messages</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxBytes(System.Int64)">
            <summary>
            Sets the maximum number of bytes in the StreamConfiguration.
            </summary>
            <param name="maxBytes">the maximum number of bytes</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxAge(NATS.Client.Internals.Duration)">
            <summary>
            Sets the maximum age in the StreamConfiguration.
            </summary>
            <param name="maxAge">the maximum message age as a Duration</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxAge(System.Int64)">
            <summary>
            Sets the maximum age in the StreamConfiguration.
            </summary>
            <param name="maxAgeMillis">the maximum message age as millis</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxMsgSize(System.Int64)">
            <summary>
            Sets the maximum message size in the StreamConfiguration.
            </summary>
            <param name="maxMsgSize">the maximum message size</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithStorageType(System.Nullable{NATS.Client.JetStream.StorageType})">
            <summary>
            Sets the storage type in the StreamConfiguration.
            </summary>
            <param name="storageType">the storage type</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithReplicas(System.Int32)">
            <summary>
            Sets the number of replicas a message must be stored on in the StreamConfiguration.
            </summary>
            <param name="replicas">the number of replicas to store this message on</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithNoAck(System.Boolean)">
            <summary>
            Sets the acknowledgement mode of the StreamConfiguration.  if no acknowledgements are
            set, then acknowledgements are not sent back to the client.  The default is false.
            </summary>
            <param name="noAck">true to disable acknowledgements.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithTemplateOwner(System.String)">
            <summary>
            Sets the template a stream in the form of raw JSON.
            </summary>
            <param name="templateOwner">the stream template of the stream.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDiscardPolicy(System.Nullable{NATS.Client.JetStream.DiscardPolicy})">
            <summary>
            Sets the discard policy in the StreamConfiguration.
            </summary>
            <param name="policy">the discard policy of the StreamConfiguration</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDuplicateWindow(NATS.Client.Internals.Duration)">
            <summary>
            Sets the duplicate checking window in the the StreamConfiguration.  A Duration.Zero
            disables duplicate checking.  Duplicate checking is disabled by default.
            </summary>
            <param name="window">duration to hold message ids for duplicate checking.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDuplicateWindow(System.Int64)">
            <summary>
            Sets the duplicate checking window in the the StreamConfiguration.  A Duration.Zero
            disables duplicate checking.  Duplicate checking is disabled by default.
            </summary>
            <param name="windowMillis">duration to hold message ids for duplicate checking.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithPlacement(NATS.Client.JetStream.Placement)">
            <summary>
            Sets the placement directive object
            </summary>
            <param name="placement">the placement directive object</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMirror(NATS.Client.JetStream.Mirror)">
            <summary>
            Sets the mirror  object
            </summary>
            <param name="mirror">the mirror object</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithSources(NATS.Client.JetStream.Source[])">
            <summary>
            Sets the sources in the StreamConfiguration.
            </summary>
            <param name="sources">the stream's sources</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithSources(System.Collections.Generic.List{NATS.Client.JetStream.Source})">
            <summary>
            Sets the sources in the StreamConfiguration.
            </summary>
            <param name="sources">the stream's sources</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.AddSources(NATS.Client.JetStream.Source[])">
            <summary>
            Sets the sources in the StreamConfiguration.
            </summary>
            <param name="sources">the stream's sources</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.AddSources(System.Collections.Generic.List{NATS.Client.JetStream.Source})">
            <summary>
            Sets the sources in the StreamConfiguration.
            </summary>
            <param name="sources">the stream's sources</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.Build">
            <summary>
            Builds the ConsumerConfiguration
            </summary>
            <returns>The StreamConfiguration</returns>
        </member>
        <member name="T:NATS.Client.JetStream.SubscribeOptions">
            <summary>
            The base class for all Subscribe Options containing a stream and
            consumer configuration.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SubscribeOptions.Durable">
            <summary>
            Gets the durable name
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SubscribeOptions.DeliverSubject">
            <summary>
            Gets the deliver subject
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SubscribeOptions.DeliverGroup">
            <summary>
            Gets the deliver group
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithStream(System.String)">
            <summary>
            Set the stream name
            </summary>
            <param name="stream">the stream name</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithDurable(System.String)">
            <summary>
            Set the durable
            </summary>
            <param name="durable">the durable value</param>
            <returns>The B</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithBind(System.Boolean)">
            <summary>
            Set as a direct subscribe
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithConfiguration(NATS.Client.JetStream.ConsumerConfiguration)">
            <summary>
            Set the ConsumerConfiguration
            </summary>
            <param name="configuration">the ConsumerConfiguration object</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithMessageAlarmTime(System.Int32)">
            <summary>
            Set the total amount of time to not receive any messages or heartbeats
            before calling the ErrorListener heartbeatAlarm 
            </summary>
            <param name="messageAlarmTime"> the time</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.Build">
            <summary>
            Builds the SubscribeOptions
            </summary>
            <returns>The SubscribeOptions object.</returns>
        </member>
        <member name="T:NATS.Client.Msg">
            <summary>
            A NATS message is an object encapsulating a subject, optional reply
            payload, optional header, and subscription information, sent or
            received by the client application.
            </summary>
        </member>
        <member name="M:NATS.Client.Msg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class without any
            subject, reply, or data.
            </summary>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject, reply, header, and data.
            </summary>
            <param name="subject">Subject of the message.</param>
            <param name="reply">A reply subject, or <c>null</c>.</param>
            <param name="header">Message headers or <c>null</c>.</param>
            <param name="data">A byte array containing the message payload.</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject, header, and data.
            </summary>
            <param name="subject">Subject of the message.</param>
            <param name="header">Message headers or <c>null</c>.</param>
            <param name="data">A byte array containing the message payload.</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject, reply, and data.
            </summary>
            <param name="subject">Subject of the message.</param>
            <param name="reply">A reply subject, or <c>null</c>.</param>
            <param name="data">A byte array containing the message payload.</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject and data.
            </summary>
            <param name="subject">Subject of the message.</param>
            <param name="data">A byte array containing the message payload.</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject and no data.
            </summary>
            <param name="subject">Subject of the message.</param>
        </member>
        <member name="P:NATS.Client.Msg.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.Reply">
            <summary>
            Gets or sets the reply subject.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.Data">
            <summary>
            Gets or sets the payload of the message.
            </summary>
            <remarks>
            This copies application data into the message. See <see cref="M:NATS.Client.Msg.AssignData(System.Byte[])" /> to directly pass the bytes buffer.
            </remarks>
            <seealso cref="M:NATS.Client.Msg.AssignData(System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Msg.AssignData(System.Byte[])">
            <summary>
            Assigns the data of the message.
            </summary>
            <remarks>
            <para>This is a direct assignment,
            to avoid expensive copy operations.  A change to the passed
            byte array will be changed in the message.</para>
            <para>The calling application is responsible for the data integrity in the message.</para>
            </remarks>
            <param name="data">a bytes buffer of data.</param>
        </member>
        <member name="P:NATS.Client.Msg.ArrivalSubcription">
            <summary>
            Gets the <see cref="T:NATS.Client.ISubscription"/> which received the message.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.ArrivalSubscription">
            <summary>
            Gets the <see cref="T:NATS.Client.ISubscription"/> which received the message.
            </summary>
        </member>
        <member name="M:NATS.Client.Msg.Respond(System.Byte[])">
            <summary>
            Send a response to the message on the arrival subscription.
            </summary>
            <param name="data">The response payload to send.</param>
            <exception cref="T:NATS.Client.NATSException">
            <para><see cref="P:NATS.Client.Msg.Reply"/> is null or empty.</para>
            <para>-or-</para>
            <para><see cref="P:NATS.Client.Msg.ArrivalSubscription"/> is null.</para>
            </exception>
        </member>
        <member name="M:NATS.Client.Msg.ToString">
            <summary>
            Generates a string representation of the messages.
            </summary>
            <returns>A string representation of the messages.</returns>
        </member>
        <member name="P:NATS.Client.Msg.Header">
            <summary>
            Gets or sets the <see cref="T:NATS.Client.MsgHeader"/> of the message.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.HasHeaders">
            <summary>
            Returns true if there is a <see cref="T:NATS.Client.MsgHeader"/> with fields set.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.Status">
            <summary>
            Gets or sets the <see cref="T:NATS.Client.MsgStatus"/> of the message.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.HasStatus">
            <summary>
            Returns true if there is a <see cref="T:NATS.Client.MsgStatus"/> with fields set.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.MetaData">
            <summary>
            Gets the metadata associated with a JetStream message.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.LastAck">
            <summary>
            the last ack that was done with this message, or null if there has not been an ack
            </summary>
            <returns>the last ack or null</returns>
        </member>
        <member name="M:NATS.Client.Msg.Ack">
            <summary>
            Acknowledges a JetStream messages received from a Consumer,
            indicating the message will not be resent.
            </summary>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="M:NATS.Client.Msg.AckSync(System.Int32)">
            <summary>
            Acknowledges a JetStream message received from a Consumer,
            indicating the message should not be received again later.
            A timeout of zero does not confirm the acknowledgement.
            </summary>
            <param name="timeout">the duration to wait for an ack
            confirmation</param>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="M:NATS.Client.Msg.Nak">
            <summary>
            Acknowledges a JetStream message has been received but indicates
            that the message is not completely processed and should be sent
            again later.
            </summary>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="M:NATS.Client.Msg.Term">
            <summary>
            Prevents this message from ever being delivered regardless of
            maxDeliverCount.
            </summary>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="M:NATS.Client.Msg.InProgress">
            <summary>
            Indicates that this message is being worked on and reset redelivery timer in the server.
            </summary>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="P:NATS.Client.Msg.IsJetStream">
            <summary>
            Checks if a message is from Jetstream or is a standard message.
            </summary>
            <returns>True if this is a JetStream Message.</returns>
        </member>
        <member name="T:NATS.Client.MsgHeader">
             <summary>
             The MsgHeader class provides key/value message header support
             similar to HTTP headers.
             </summary>
             <remarks>
             Keys and values may only contain printable ASCII character values and
             cannot contain `:`.  Concurrent access may result in undefined
             behavior.
             </remarks>
             <example>
             Setting a header field in a message:
             <code>
             var m = new Msg();
             m.Header["Content-Type"] = "json";
             </code>
             
             Getting a header field from a message:
             <code>
             string contentType = m.Header["Content-Type"];
             </code>
            
             To set multiple values:
             <code>
             m.Header.Add("foo", "value1");
             m.Header.Add("foo", "value2");
             </code>
             Get multiple values:
             <code>
             string []values = m.Header.GetValues("foo");
             </code>
             </example>
        </member>
        <member name="F:NATS.Client.MsgHeader.Status">
            <summary>
            Status header key.
            </summary>
        </member>
        <member name="F:NATS.Client.MsgHeader.Description">
            <summary>
            Description header key.
            </summary>
        </member>
        <member name="M:NATS.Client.MsgHeader.#ctor">
            <summary>
            Initializes a new empty instance of the MsgHeader class.
            </summary>
        </member>
        <member name="M:NATS.Client.MsgHeader.#ctor(NATS.Client.MsgHeader)">
            <summary>
            Copies the entries from an existing MsgHeader instance to a
            new MsgHeader instance.
            </summary>
            <remarks>
            The header cannot be empty or contain invalid fields.
            </remarks>
            <param name="header">the NATS message header to copy.</param>
        </member>
        <member name="P:NATS.Client.MsgHeader.Keys">
            <summary>
            Gets an enumerator for the keys.
            </summary>
        </member>
        <member name="P:NATS.Client.MsgHeader.Count">
            <summary>
            Gets the current number of header entries.
            </summary>
        </member>
        <member name="P:NATS.Client.MsgHeader.Item(System.String)">
            <summary>
            Gets or sets the string entry with the specified string key in the message header.
            </summary>
            <param name="name">The string key of the entry to locate. The key cannot be null, empty, or whitespace.</param>
            <returns>A string that contains the comma-separated list of values associated with the specified key, if found; otherwise, null</returns>
        </member>
        <member name="M:NATS.Client.MsgHeader.Add(System.String,System.String)">
            <summary>
            Add a header field with the specified name and value.
            </summary>
            <param name="name">Name of the header field.</param>
            <param name="value">Value of the header field.</param>
        </member>
        <member name="M:NATS.Client.MsgHeader.Set(System.String,System.String)">
            <summary>
            Sets the value of a message header field.
            </summary>
            <param name="name">Name of the header field to set.</param>
            <param name="value">Value of the header field.</param>
        </member>
        <member name="M:NATS.Client.MsgHeader.Remove(System.String)">
            <summary>
            Remove a header entry.
            </summary>
            <param name="name">Name of the header field to remove.</param>
        </member>
        <member name="M:NATS.Client.MsgHeader.Clear">
            <summary>
            Removes all entries from the message header.
            </summary>
        </member>
        <member name="M:NATS.Client.MsgHeader.GetValues(System.String)">
            <summary>
            Gets all values of a header field.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.MsgHeader.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the message header
            keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NATS.Client.NaCl.CryptoBytes">
            <summary>
            Utility class for cryptography.
            </summary>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ConstantTimeEquals(System.Byte[],System.Byte[])">
            <summary>
            Comparison of two arrays.
            
            The runtime of this method does not depend on the contents of the arrays. Using constant time
            prevents timing attacks that allow an attacker to learn if the arrays have a common prefix.
            
            It is important to use such a constant time comparison when verifying MACs.
            </summary>
            <param name="x">Byte array</param>
            <param name="y">Byte array</param>
            <returns>True if arrays are equal</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ConstantTimeEquals(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
            Comparison of two array segments.
            
            The runtime of this method does not depend on the contents of the arrays. Using constant time
            prevents timing attacks that allow an attacker to learn if the arrays have a common prefix.
            
            It is important to use such a constant time comparison when verifying MACs.
            </summary>
            <param name="x">Byte array segment</param>
            <param name="y">Byte array segment</param>
            <returns>True if contents of x and y are equal</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ConstantTimeEquals(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Comparison of two byte sequences.
            
            The runtime of this method does not depend on the contents of the arrays. Using constant time
            prevents timing attacks that allow an attacker to learn if the arrays have a common prefix.
            
            It is important to use such a constant time comparison when verifying MACs.
            </summary>
            <param name="x">Byte array</param>
            <param name="xOffset">Offset of byte sequence in the x array</param>
            <param name="y">Byte array</param>
            <param name="yOffset">Offset of byte sequence in the y array</param>
            <param name="length">Lengh of byte sequence</param>
            <returns>True if sequences are equal</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.Wipe(System.Byte[])">
            <summary>
            Overwrites the contents of the array, wiping the previous content. 
            </summary>
            <param name="data">Byte array</param>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.Wipe(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overwrites the contents of the array, wiping the previous content. 
            </summary>
            <param name="data">Byte array</param>
            <param name="offset">Index of byte sequence</param>
            <param name="length">Length of byte sequence</param>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.Wipe(System.ArraySegment{System.Byte})">
            <summary>
            Overwrites the contents of the array segment, wiping the previous content. 
            </summary>
            <param name="data">Byte array segment</param>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ToHexStringUpper(System.Byte[])">
            <summary>
            Constant-time conversion of the bytes array to an upper-case hex string.
            Please see http://stackoverflow.com/a/14333437/445517 for the detailed explanation
            </summary>
            <param name="data">Byte array</param>
            <returns>Hex representation of byte array</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ToHexStringLower(System.Byte[])">
            <summary>
            Constant-time conversion of the bytes array to an lower-case hex string.
            Please see http://stackoverflow.com/a/14333437/445517 for the detailed explanation.
            </summary>
            <param name="data">Byte array</param>
            <returns>Hex representation of byte array</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.FromHexString(System.String)">
            <summary>
            Converts the hex string to bytes. Case insensitive.
            </summary>
            <param name="hexString">Hex encoded byte sequence</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ToBase64String(System.Byte[])">
            <summary>
            Encodes the bytes with the Base64 encoding. 
            More compact than hex, but it is case-sensitive and uses the special characters `+`, `/` and `=`.
            </summary>
            <param name="data">Byte array</param>
            <returns>Base 64 encoded data</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.FromBase64String(System.String)">
            <summary>
            Decodes a Base64 encoded string back to bytes.
            </summary>
            <param name="base64String">Base 64 encoded data</param>
            <returns>Byte array</returns>
        </member>
        <member name="F:NATS.Client.NaCl.Ed25519.PublicKeySize">
            <summary>
            Public Keys are 32 byte values. All possible values of this size a valid.
            </summary>
        </member>
        <member name="F:NATS.Client.NaCl.Ed25519.SignatureSize">
            <summary>
            Signatures are 64 byte values
            </summary>
        </member>
        <member name="F:NATS.Client.NaCl.Ed25519.PrivateKeySeedSize">
            <summary>
            Private key seeds are 32 byte arbitrary values. This is the form that should be generated and stored.
            </summary>
        </member>
        <member name="F:NATS.Client.NaCl.Ed25519.ExpandedPrivateKeySize">
            <summary>
            A 64 byte expanded form of private key. This form is used internally to improve performance
            </summary>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.Verify(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
            Verify Ed25519 signature
            </summary>
            <param name="signature">Signature bytes</param>
            <param name="message">Message</param>
            <param name="publicKey">Public key</param>
            <returns>True if signature is valid, false if it's not</returns>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.Verify(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Verify Ed25519 signature
            </summary>
            <param name="signature">Signature bytes</param>
            <param name="message">Message</param>
            <param name="publicKey">Public key</param>
            <returns>True if signature is valid, false if it's not</returns>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.Sign(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
            Create new Ed25519 signature
            </summary>
            <param name="signature">Buffer for signature</param>
            <param name="message">Message bytes</param>
            <param name="expandedPrivateKey">Expanded form of private key</param>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.Sign(System.Byte[],System.Byte[])">
            <summary>
            Create new Ed25519 signature
            </summary>
            <param name="message">Message bytes</param>
            <param name="expandedPrivateKey">Expanded form of private key</param>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.PublicKeyFromSeed(System.Byte[])">
            <summary>
            Calculate public key from private key seed
            </summary>
            <param name="privateKeySeed">Private key seed value</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.ExpandedPrivateKeyFromSeed(System.Byte[])">
            <summary>
            Calculate expanded form of private key from the key seed.
            </summary>
            <param name="privateKeySeed">Private key seed value</param>
            <returns>Expanded form of the private key</returns>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.KeyPairFromSeed(System.Byte[]@,System.Byte[]@,System.Byte[])">
            <summary>
            Calculate key pair from the key seed.
            </summary>
            <param name="publicKey">Public key</param>
            <param name="expandedPrivateKey">Expanded form of the private key</param>
            <param name="privateKeySeed">Private key seed value</param>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.KeyPairFromSeed(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
            Calculate key pair from the key seed.
            </summary>
            <param name="publicKey">Public key</param>
            <param name="expandedPrivateKey">Expanded form of the private key</param>
            <param name="privateKeySeed">Private key seed value</param>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.#ctor">
            <summary>
            Allocation and initialization of the new SHA-512 object.
            </summary>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Init">
            <summary>
            Performs an initialization of internal SHA-512 state.
            </summary>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Update(System.ArraySegment{System.Byte})">
            <summary>
            Updates internal state with data from the provided array segment.
            </summary>
            <param name="data">Array segment</param>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates internal state with data from the provided array.
            </summary>
            <param name="data">Array of bytes</param>
            <param name="index">Offset of byte sequence</param>
            <param name="length">Sequence length</param>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Finalize(System.ArraySegment{System.Byte})">
            <summary>
            Finalizes SHA-512 hashing
            </summary>
            <param name="output">Output buffer</param>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Finalize">
            <summary>
            Finalizes SHA-512 hashing.
            </summary>
            <returns>Hash bytes</returns>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Hash(System.Byte[])">
            <summary>
            Calculates SHA-512 hash value for the given bytes array.
            </summary>
            <param name="data">Data bytes array</param>
            <returns>Hash bytes</returns>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Hash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates SHA-512 hash value for the given bytes array.
            </summary>
            <param name="data">Data bytes array</param>
            <param name="index">Offset of byte sequence</param>
            <param name="length">Sequence length</param>
            <returns>Hash bytes</returns>
        </member>
        <member name="T:NATS.Client.Defaults">
            <summary>
            This class contains default values for fields used throughout NATS.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Version">
            <summary>
            Client version
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Url">
            <summary>
            The default NATS connect url ("nats://localhost:4222")
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Port">
            <summary>
            The default NATS connect port. (4222)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxReconnect">
            <summary>
            Default number of times to attempt a reconnect. (60)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.ReconnectWait">
            <summary>
            Default ReconnectWait time (2 seconds)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Timeout">
            <summary>
            Default timeout  (2 seconds).
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.PingInterval">
            <summary>
             Default ping interval (2 minutes);
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxPingOut">
            <summary>
            Default MaxPingOut value (2);
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxChanLen">
            <summary>
            Default MaxChanLen (65536)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.RequestChanLen">
            <summary>
            Default Request Channel Length
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.LangString">
            <summary>
            Language string of this client, ".NET"
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.SubPendingMsgsLimit">
            <summary>
            Default subscriber pending messages limit.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.SubPendingBytesLimit">
            <summary>
            Default subscriber pending bytes limit.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.DefaultDrainTimeout">
            <summary>
            Default Drain Timeout in milliseconds.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.ReconnectBufferSize">
            <summary>
            Default Pending buffer size is 8 MB.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.ReconnectJitter">
            <summary>
            Default non-TLS reconnect jitter of 100ms.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.ReconnectJitterTLS">
            <summary>
            Default TLS reconnect jitter of 1s.
            </summary>
        </member>
        <member name="T:NATS.Client.ConnEventArgs">
            <summary>
            Provides the details when the state of a <see cref="T:NATS.Client.Connection"/>
            changes.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnEventArgs.Conn">
            <summary>
            Gets the <see cref="T:NATS.Client.Connection"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnEventArgs.Error">
            <summary>
            Gets any Exception associated with the connection state change.
            </summary>
            <example>Could be an exception causing the connection to get disconnected.</example>
        </member>
        <member name="T:NATS.Client.ReconnectDelayEventArgs">
            <summary>
            Provides details for the ReconnectDelayEvent.
            </summary>
            <remarks>
            This event handler is a good place to apply backoff logic.  The associated
            connection will be RECONNECTING so accessing or calling IConnection methods will result
            in undefined behavior (including deadlocks).  Assigning a non-default handler
            requires the application to define reconnect delay and backoff behavior.
            </remarks>
        </member>
        <member name="P:NATS.Client.ReconnectDelayEventArgs.Attempts">
            <Summary>
            Gets the number of times the client has traversed the
            server list in attempting to reconnect.
            </Summary>
        </member>
        <member name="T:NATS.Client.ErrEventArgs">
            <summary>
            Provides details for an error encountered asynchronously
            by an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Conn">
            <summary>
            Gets the <see cref="T:NATS.Client.Connection"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Subscription">
            <summary>
            Gets the <see cref="T:NATS.Client.Subscription"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Error">
            <summary>
            Gets the error message associated with the event.
            </summary>
        </member>
        <member name="T:NATS.Client.ConnJsSubEventArgs">
            <summary>
            Base class for Event Args that have a connection and a subscription
            by an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnJsSubEventArgs.Conn">
            <summary>
            Gets the <see cref="T:NATS.Client.Connection"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnJsSubEventArgs.Sub">
            <summary>
            Gets the <see cref="T:NATS.Client.Subscription"/> associated with the event.
            </summary>
        </member>
        <member name="T:NATS.Client.HeartbeatAlarmEventArgs">
            <summary>
            Provides details for an heartbeat alarm encountered
            </summary>
        </member>
        <member name="T:NATS.Client.UnhandledStatusEventArgs">
            <summary>
            Provides details for an status message when it is unknown or unhandled
            </summary>
        </member>
        <member name="T:NATS.Client.FlowControlProcessedEventArgs">
            <summary>
            Provides details for an status message when when a flow control is processed.
            </summary>
        </member>
        <member name="T:NATS.Client.UserJWTEventArgs">
            <summary>
            Provides details when a user JWT is read during a connection.  The
            JWT must be set or a <see cref="T:NATS.Client.NATSConnectionException"/> will
            be thrown.
            </summary>
        </member>
        <member name="P:NATS.Client.UserJWTEventArgs.JWT">
            <Summary>
            Sets the JWT read by the event handler.   This MUST be set in the event handler.
            </Summary>
        </member>
        <member name="T:NATS.Client.UserSignatureEventArgs">
            <summary>
            Provides details when a user signature is read during a connection.
            The User Signature event signs the ServerNonce and sets the 
            SignedNonce with the result.
            The SignedNonce must be set or a <see cref="T:NATS.Client.NATSConnectionException"/>
            will be thrown.
            </summary>
        </member>
        <member name="P:NATS.Client.UserSignatureEventArgs.ServerNonce">
            <summary>
            Gets the nonce sent from the server.
            </summary>
        </member>
        <member name="P:NATS.Client.UserSignatureEventArgs.SignedNonce">
            <Summary>
            Sets the signed nonce to be returned to the server.  This MUST be set.
            </Summary>
        </member>
        <member name="T:NATS.Client.IC">
            Internal Constants
        </member>
        <member name="T:NATS.Client.MsgHandlerEventArgs">
            <summary>
            Provides the message received by an <see cref="T:NATS.Client.IAsyncSubscription"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.MsgHandlerEventArgs.Message">
            <summary>
            Retrieves the message.
            </summary>
        </member>
        <member name="T:NATS.Client.NkeyPair">
            <summary>
            Partial implementation of the NATS Ed25519 KeyPair.  This is not complete, but provides enough
            functionality to implement the client side NATS 2.0 security scheme.
            </summary>
        </member>
        <member name="P:NATS.Client.NkeyPair.PublicKey">
            <summary>
            Gets the public key of the keypair.
            </summary>
        </member>
        <member name="P:NATS.Client.NkeyPair.PrivateKeySeed">
            <summary>
            Gets the private key of the keypair.
            </summary>
        </member>
        <member name="M:NATS.Client.NkeyPair.Wipe">
            <summary>
            Wipes clean the internal private keys.
            </summary>
        </member>
        <member name="M:NATS.Client.NkeyPair.Sign(System.Byte[])">
            <summary>
            Signs data and returns a signature.
            </summary>
            <param name="src"></param>
            <returns>The signature.</returns>
        </member>
        <member name="M:NATS.Client.NkeyPair.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the NkeyPair and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NATS.Client.NkeyPair.Dispose">
            <summary>
            Releases all resources used by the NkeyPair.
            </summary>
        </member>
        <member name="T:NATS.Client.Nkeys">
            <summary>
            Nkeys is a class provided to manipulate Nkeys and generate NkeyPairs. 
            </summary>
        </member>
        <member name="M:NATS.Client.Nkeys.Decode(System.String)">
            <summary>
            Decodes a base 32 encoded NKey into a nkey seed and verifies the checksum.
            </summary>
            <param name="src">Base 32 encoded Nkey.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Nkeys.Wipe(System.Byte[]@)">
            <summary>
            Wipes a byte array.
            </summary>
            <param name="src">byte array to wipe</param>
        </member>
        <member name="M:NATS.Client.Nkeys.Wipe(System.String)">
            <summary>
            Wipes a string.
            </summary>
            <param name="src">string to wipe</param>
        </member>
        <member name="M:NATS.Client.Nkeys.FromSeed(System.String)">
            <summary>
            Creates an NkeyPair from a private seed String.
            </summary>
            <param name="seed"></param>
            <returns>A NATS Ed25519 Keypair</returns>
        </member>
        <member name="M:NATS.Client.Nkeys.CreateUserSeed">
            <summary>
            Creates a private user seed String.
            </summary>
            <returns>A NATS Ed25519 User Seed</returns>
        </member>
        <member name="M:NATS.Client.Nkeys.CreateAccountSeed">
            <summary>
            Creates a private account seed String.
            </summary>
            <returns>A NATS Ed25519 Account Seed</returns>
        </member>
        <member name="M:NATS.Client.Nkeys.CreateOperatorSeed">
            <summary>
            Creates a private operator seed String.
            </summary>
            <returns>A NATS Ed25519 Operator Seed</returns>
        </member>
        <member name="M:NATS.Client.Nkeys.PublicKeyFromSeed(System.String)">
            <summary>
            Returns a seed's public key.
            </summary>
            <param name="seed"></param>
            <returns>A the public key corresponding to Seed</returns>
        </member>
        <member name="T:NATS.Client.NUID">
            <summary>
            NUID needs to be very fast to generate and truly unique, all while being entropy pool friendly.
            We will use 12 bytes of crypto generated data (entropy draining), and 10 bytes of sequential data
            that is started at a pseudo random number and increments with a pseudo-random increment.
            Total is 22 bytes of base 36 ascii text.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.LENGTH">
            <summary>
            Length of the NUID.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.MAXPRE">
            <summary>
            Maximum value of the prefix.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.MAXSEQ">
            <summary>
            Maximum value of the sequence.
            </summary>
        </member>
        <member name="M:NATS.Client.NUID.RandomizePrefix">
            <summary>
            Generates a new crypto/rand seeded prefix.
            </summary>
            <remarks>
            Generally not needed, this happens automatically.
            </remarks>
        </member>
        <member name="M:NATS.Client.NUID.#ctor">
            <summary>
            Creates a new NUID object.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Instance">
            <summary>
            Gets the global instance of a NUID object
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.NextGlobal">
            <summary>
            Returns the next NUID from the global instance.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Next">
            <summary>
            Returns the next nuid string value from the NUID object.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Pre">
            <summary>
            Gets or sets the prefix.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="P:NATS.Client.NUID.Seq">
            <summary>
            Gets or sets the sequence.  Not normally used outside of testing.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="P:NATS.Client.NUID.Length">
            <summary>
            Gets the Length of the nuid.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="T:NATS.Client.Options">
            <summary>
            This class is used to setup all NATs client options.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ClosedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection is closed.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ServerDiscoveredEventHandler">
            <summary>
            Represents the method that will handle an event raised
            whenever a new server has joined the cluster.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.DisconnectedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection has been disconnected from a server.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ReconnectedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection has reconnected to a server.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.AsyncErrorEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when an error occurs out of band.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.LameDuckModeEventHandler">
            <summary>
            Represents the method that will handle an event raised
            when the server notifies the connection that it entered lame duck mode.
            </summary>
            <remarks>
            A server in lame duck mode will gradually disconnect all its connections
            before shuting down. This is often used in deployments when upgrading
            NATS Servers.
            </remarks>
        </member>
        <member name="F:NATS.Client.Options.ReconnectDelayHandler">
            <summary>
            Represents the optional method that is used to get from the
            user the desired delay the client should pause before attempting
            to reconnect again.
            </summary>
            <remarks>
            Note that this is invoked after the library tried the
            entire list of URLs and failed to reconnect.  By default, the client
            will use the sum of <see cref="P:NATS.Client.Options.ReconnectWait"/> and a random value between
            zero and <see cref="P:NATS.Client.Options.ReconnectJitter"/> or
            <see cref="P:NATS.Client.Options.ReconnectJitterTLS"/>
            </remarks>
        </member>
        <member name="F:NATS.Client.Options.HeartbeatAlarmEventHandler">
            <summary>
            Represents the method that will handle an heartbeat alarm
            </summary>
        </member>
        <member name="F:NATS.Client.Options.UnhandledStatusEventHandler">
            <summary>
            Represents the method that will handle a unknown or unhandled status event
            </summary>
        </member>
        <member name="F:NATS.Client.Options.FlowControlProcessedEventHandler">
            <summary>
            Represents the method that will handle a flow control processed event
            </summary>
        </member>
        <member name="F:NATS.Client.Options.UserJWTEventHandler">
            <summary>
            Represents the optional method that is used to fetch and
            return the account signed JWT for this user.  Exceptions thrown
            here will be passed up to the caller when creating a connection.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.UserSignatureEventHandler">
            <summary>
            Represents the optional method that is used to sign a nonce
            from the server while authenticating with nkeys. The user
            should sign the nonce and set the base64 encoded signature.
            Exceptions thrown here will be passed up to the caller when 
            creating a connection.
            </summary>
        </member>
        <member name="M:NATS.Client.Options.SetUserCredentials(System.String,System.String)">
            <summary>
            Sets user credentials using the NATS 2.0 security scheme.
            </summary>
            <param name="credentialsPath">A user JWT, e.g user.jwt</param>
            <param name="privateKeyPath">Private Key file</param>
        </member>
        <member name="M:NATS.Client.Options.SetUserCredentials(System.String)">
            <summary>
            Sets user credentials using the NATS 2.0 security scheme.
            </summary>
            <param name="credentialsPath">A chained credentials file, e.g user.cred</param>
        </member>
        <member name="M:NATS.Client.Options.SetUserCredentialHandlers(System.EventHandler{NATS.Client.UserJWTEventArgs},System.EventHandler{NATS.Client.UserSignatureEventArgs})">
            <summary>
            SetUserJWT will set the callbacks to retrieve the user's JWT and
            the signature callback to sign the server nonce. This an the Nkey
            option are mutually exclusive.
            </summary>
            <param name="userJWTEventHandler">A User JWT Event Handler</param>
            <param name="userSignatureEventHandler">A User signature Event Handler</param>
        </member>
        <member name="M:NATS.Client.Options.SetNkey(System.String,System.EventHandler{NATS.Client.UserSignatureEventArgs})">
            <summary>
            SetNkey will set the public Nkey and the signature callback to
            sign the server nonce.
            </summary>
            <param name="publicNkey">The User's public Nkey</param>
            <param name="userSignatureEventHandler">A User signature Event Handler to sign the server nonce.</param>
        </member>
        <member name="M:NATS.Client.Options.SetNkey(System.String,System.String)">
            <summary>
            SetNkey will set the public Nkey and the signature callback to
            sign the server nonce.
            </summary>
            <param name="publicNkey">The User's public Nkey</param>
            <param name="privateKeyPath">A path to a file containing the private Nkey.</param>
        </member>
        <member name="M:NATS.Client.Options.SetJWTEventHandlers(System.EventHandler{NATS.Client.UserJWTEventArgs},System.EventHandler{NATS.Client.UserSignatureEventArgs})">
            <summary>
            Sets a custom JWT Event Handler and Signature handler.
            </summary>
            <param name="JWTEventHandler"></param>
            <param name="SignatureEventHandler"></param>
        </member>
        <member name="P:NATS.Client.Options.Url">
            <summary>
            Gets or sets the url used to connect to the NATs server.
            </summary>
            <remarks>
            This may contain username/password information.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.Servers">
            <summary>
            Gets or sets the array of servers that the NATS client will connect to.
            </summary>
            <remarks>
            The individual URLs may contain username/password information.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.NoRandomize">
            <summary>
            Gets or sets a value indicating whether or not the server chosen for connection
            should not be selected randomly.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Name">
            <summary>
            Gets or sets the name of this client.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Verbose">
            <summary>
            Gets or sets a value indicating whether or not logging information should be verbose.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Pedantic">
            <summary>
            This option is not used by the NATS Client.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.UseOldRequestStyle">
            <summary>
            Gets or sets a value indicating whether or not the old
            request pattern should be used.
            </summary>
            <remarks>
            The old request pattern involved a separate subscription
            per request inbox. The new style (default) involves creating
            a single inbox subscription per connection, upon the first
            request, and mapping outbound requests over that one
            subscription.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.Secure">
            <summary>
            Get or sets a value indicating whether or not a secure connection (TLS)
            should be made to NATS servers.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.AllowReconnect">
            <summary>
            Gets or sets a value indicating whether or not an <see cref="T:NATS.Client.IConnection"/> will attempt
            to reconnect to the NATS server if a connection has been lost.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ReconnectForever">
            <summary>
            Set <see cref="P:NATS.Client.Options.MaxReconnect"/> to this value for the client to attempt to
            connect indefinitely. 
            </summary>
        </member>
        <member name="P:NATS.Client.Options.MaxReconnect">
            <summary>
            Gets or sets the maxmimum number of times a connection will
            attempt to reconnect.  To reconnect indefinitely set this value to
            <see cref="F:NATS.Client.Options.ReconnectForever"/>
            </summary>
        </member>
        <member name="P:NATS.Client.Options.ReconnectWait">
            <summary>
            Gets or sets the amount of time, in milliseconds, the client will 
            wait before attempting a reconnection.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.PingInterval">
            <summary>
            Gets or sets the interval, in milliseconds, pings will be sent to the server.
            </summary>
            <remarks>
            Take care to coordinate this value with the server's interval.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.Timeout">
            <summary>
            Gets or sets the timeout, in milliseconds, when connecting to a NATS server.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.MaxPingsOut">
            <summary>
            Gets or sets the maximum number of outstanding pings before
            terminating a connection.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.SubChannelLength">
            <summary>
            Gets or sets the size of the subscriber channel, or number
            of messages the subscriber will buffer internally.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.User">
            <summary>
            Gets or sets the user name used when connecting to the NATs server,
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Password">
            <summary>
            Sets the user password used when connecting to the NATs server,
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Token">
            <summary>
            Gets or sets the token used when connecting to the NATs server
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.CustomInboxPrefix">
            <summary>
            Gets or sets a custom inbox prefix.
            </summary>
        </member>
        <member name="M:NATS.Client.Options.AddCertificate(System.String)">
            <summary>
            Adds an X.509 certificate from a file for use with a secure connection.
            </summary>
            <param name="fileName">Path to the certificate file to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is <c>null</c>.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate
            occurred. For example:
            <list>
            <item>The certificate file does not exist.</item>
            <item>The certificate is invalid.</item>
            <item>The certificate's password is incorrect.</item></list></exception>
        </member>
        <member name="M:NATS.Client.Options.AddCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds an X.509 certificate for use with a secure connection.
            </summary>
            <param name="certificate">An X.509 certificate represented as an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificate"/> is <c>null</c>.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate
            occurred. For example:
            <list>
            <item>The certificate file does not exist.</item>
            <item>The certificate is invalid.</item>
            <item>The certificate's password is incorrect.</item></list></exception>
        </member>
        <member name="F:NATS.Client.Options.TLSRemoteCertificationValidationCallback">
            <summary>
            Overrides the default NATS RemoteCertificationValidationCallback.
            </summary>
            <remarks>
            The default callback simply checks if there were any protocol
            errors. Overriding this callback is useful during testing, or accepting self
            signed certificates.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.SubscriberDeliveryTaskCount">
            <summary>
            Gets or sets the number of long running tasks to deliver messages
            to asynchronous subscribers. The default is zero (<c>0</c>) indicating each
            asynchronous subscriber has its own channel and task created to 
            deliver messages.
            </summary>
            <remarks>
            The default where each subscriber has a delivery task is very 
            performant, but does not scale well when large numbers of
            subscribers are required in an application.  Setting this value
            will limit the number of subscriber channels to the specified number
            of long running tasks.  These tasks will process messages for ALL
            asynchronous subscribers rather than one task for each subscriber.  
            Delivery order by subscriber is still guaranteed.  The shared message
            processing channels are still each bounded by the SubChannelLength 
            option.  Note, slow subscriber errors will flag the last subscriber 
            processed in the tasks, which may not actually be the slowest subscriber.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.SubscriptionBatchSize">
            <summary>
            Gets or sets the batch size for calling subscription handlers.
            </summary>
            <remarks>
            When delivering messages to the subscriber, the batch size determines
            how many messages could be retrieved from the internal subscription
            queue at one time. This can allow higher performance from a single
            subscriber by avoiding the locking overhead of one-at-a-time
            retrieval from the queue.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.NoEcho">
            <summary>
            NoEcho configures whether the server will echo back messages
            that are sent on this connection if we also have matching subscriptions.
            Note this is supported on servers >= version 1.2. Proto 1 or greater.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ReconnectBufferSizeUnbounded">
            <summary>
            Constant used to sets the reconnect buffer size to unbounded.
            </summary>
            <seealso cref="P:NATS.Client.Options.ReconnectBufferSize"/>
        </member>
        <member name="F:NATS.Client.Options.ReconnectBufferDisabled">
            <summary>
            Constant that disables the reconnect buffer.
            </summary>
            <seealso cref="P:NATS.Client.Options.ReconnectBufferSize"/>
        </member>
        <member name="P:NATS.Client.Options.ReconnectBufferSize">
            <summary>
            Gets or sets the buffer size of messages kept while busy reconnecting.
            </summary>
            <remarks>
            When reconnecting, the NATS client will hold published messages that
            will be flushed to the new server upon a successful reconnect.  The default
            is buffer size is 8 MB.  This buffering can be disabled.
            </remarks>
            <seealso cref="F:NATS.Client.Options.ReconnectBufferSizeUnbounded"/>
            <seealso cref="F:NATS.Client.Options.ReconnectBufferDisabled"/>
        </member>
        <member name="M:NATS.Client.Options.SetReconnectJitter(System.Int32,System.Int32)">
            <summary>
            Sets the the upper bound for a random delay in milliseconds added to
            ReconnectWait during a reconnect for clear and TLS connections.
            </summary>
            <remarks>
            Defaults are 100 ms and 1s for TLS.
            </remarks>
            <seealso cref="F:NATS.Client.Options.ReconnectDelayHandler"/>
            <seealso cref="P:NATS.Client.Options.ReconnectJitter"/>
            <seealso cref="P:NATS.Client.Options.ReconnectJitterTLS"/>
            <seealso cref="P:NATS.Client.Options.ReconnectWait"/>
        </member>
        <member name="P:NATS.Client.Options.ReconnectJitter">
            <summary>
            Get the the upper bound for a random delay added to
            ReconnectWait during a reconnect for connections.
            </summary>
            <seealso cref="F:NATS.Client.Options.ReconnectDelayHandler"/>
            <seealso cref="P:NATS.Client.Options.ReconnectJitterTLS"/>
            <seealso cref="P:NATS.Client.Options.ReconnectWait"/>
            <seealso cref="M:NATS.Client.Options.SetReconnectJitter(System.Int32,System.Int32)"/>
        </member>
        <member name="P:NATS.Client.Options.ReconnectJitterTLS">
            <summary>
            Get the the upper bound for a random delay added to
            ReconnectWait during a reconnect for TLS connections.
            </summary>
            <seealso cref="F:NATS.Client.Options.ReconnectDelayHandler"/>
            <seealso cref="P:NATS.Client.Options.ReconnectJitter"/>
            <seealso cref="M:NATS.Client.Options.SetReconnectJitter(System.Int32,System.Int32)"/>
        </member>
        <member name="M:NATS.Client.Options.ToString">
            <summary>
            Returns a string representation of the
            value of this Options instance.
            </summary>
            <returns>String value of this instance.</returns>
        </member>
        <member name="T:NATS.Client.Rx.INATSObservable`1">
            <summary>
            Marker interface to have shipped extension methods to not interfere
            with official RX extensions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NATS.Client.Rx.NATSObservable`1">
            <summary>
            Base-class for basing observable solutions upon.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NATS.Client.Rx.NATSObservable`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes sent observer to the observable stream.
            </summary>
            <param name="observer">The Observer to invoke when messages arrive.</param>
            <returns>Subscription. Dispose when done consuming.</returns>
        </member>
        <member name="T:NATS.Client.Rx.NATSObservableSubscription">
            <summary>
            Represents an observable async subscription to which you
            can subscribe an consume messages from in push-style form.
            </summary>
        </member>
        <member name="M:NATS.Client.Rx.NATSObservableSubscription.Wrap(NATS.Client.IAsyncSubscription)">
            <summary>
            Wraps sent subscription and turns it into an observable.
            </summary>
            <param name="subscription"></param>
            <returns></returns>
        </member>
        <member name="T:NATS.Client.Rx.NATSRxException">
            <summary>
            The exception that is thrown when a RX operation fails.
            </summary>
        </member>
        <member name="M:NATS.Client.Rx.Ops.OpsExtensions.Subscribe``1(NATS.Client.Rx.INATSObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Subscribes a delegating observer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ob"></param>
            <param name="onNext"></param>
            <param name="onError"></param>
            <param name="onCompleted"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Rx.Ops.OpsExtensions.SubscribeSafe``1(NATS.Client.Rx.INATSObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Subscribes a Safe delegating observer. Safe means that in the event of a failing observer, it will not get unsubscribed and disposed
            but instead still be seen as a valid observer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ob"></param>
            <param name="onNext"></param>
            <param name="onError"></param>
            <param name="onCompleted"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Rx.Ops.OpsExtensions.SubscribeSafe``1(NATS.Client.Rx.INATSObservable{``0},System.IObserver{``0})">
            <summary>
            Subscribes a Safe observer. Safe means that in the event of a failing observer, it will not get unsubscribed and disposed
            but instead still be seen as a valid observer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ob"></param>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Rx.Ops.OpsExtensions.Where``1(NATS.Client.Rx.INATSObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies passed predicate <paramref name="predicate"/> to filter the stream of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ob"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Rx.Ops.OpsExtensions.Select``2(NATS.Client.Rx.INATSObservable{``0},System.Func{``0,``1})">
            <summary>
            Maps observable of <typeparamref name="TSrc"/> to observable of <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TSrc"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ob"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Rx.RxExtensions.Observe(NATS.Client.IConnection,System.String)">
            <summary>
            Subscribes to the passed subject and returns a hot observable. Hence unless you
            subscribe to the observable, no message will be handled and old messages will
            not be delivered, only new messages.
            </summary>
            <param name="cn">Connection to observe.</param>
            <param name="subject">Subject to observe.</param>
            <returns>Observable stream of messages.</returns>
        </member>
        <member name="M:NATS.Client.Rx.RxExtensions.ToObservable(NATS.Client.IAsyncSubscription)">
            <summary>
            Turns the passed <see cref="T:NATS.Client.IAsyncSubscription"/> to a hot observable. Hence unless you
            subscribe to the observable, no message will be handled and old messages will
            not be delivered, only new messages.
            </summary>
            <param name="subscription">Subscription to observe.</param>
            <returns>Observable stream of messages.</returns>
            <remarks>The passed subscription will be disposed when you dispose the observable.</remarks>
        </member>
        <member name="T:NATS.Client.Statistics">
            <summary>
            Tracks various statistics received and sent on an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.InMsgs">
            <summary>
            Gets the number of inbound messages received.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.OutMsgs">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.InBytes">
            <summary>
            Gets the number of incoming bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.OutBytes">
            <summary>
            Gets the outgoing number of bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.Reconnects">
            <summary>
            Gets the number of reconnections.
            </summary>
        </member>
        <member name="T:NATS.Client.Subscription">
            <summary>
            Represents interest in a NATS topic. This class should
            not be used directly.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Sid">
            <summary>
            the id associated with the subscription, used by the connection when processing an incoming
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Subject">
            <summary>
            Gets the subject for this subscription.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Queue">
            <summary>
            Gets the optional queue group name.
            </summary>
            <remarks>
            If present, all subscriptions with the same name will form a distributed queue, and each message will only
            be processed by one member of the group.
            </remarks>
        </member>
        <member name="P:NATS.Client.Subscription.Connection">
            <summary>
            Gets the <see cref="P:NATS.Client.Subscription.Connection"/> associated with this instance.
            </summary>
        </member>
        <member name="M:NATS.Client.Subscription.processMsg(NATS.Client.Msg)">
            <summary>
            Called by <see cref="T:NATS.Client.Connection"/> when a <see cref="T:NATS.Client.Msg"/> is received, returning
            a value indicating if the <see cref="T:NATS.Client.Connection"/> should keep the subscription
            after processing.
            </summary>
            <param name="msg">A <see cref="T:NATS.Client.Msg"/> received by the <see cref="T:NATS.Client.Subscription"/>.</param>
            <returns><c>true</c> if-and-only-if the <see cref="T:NATS.Client.Subscription"/> should remain active;
            otherwise <c>false</c> if the <see cref="T:NATS.Client.Connection"/> should remove this
            instance.</returns>
        </member>
        <member name="M:NATS.Client.Subscription.tallyDeliveredMessage(NATS.Client.Msg)">
            <summary>
            Implementors should call this method when <paramref name="msg"/> has been
            delivered to an <see cref="T:NATS.Client.ISubscription"/>.
            </summary>
            <remarks>Caller must lock on <see cref="F:NATS.Client.Subscription.mu"/>.</remarks>
            <param name="msg">The <see cref="T:NATS.Client.Msg"/> object delivered to a
            <see cref="T:NATS.Client.ISubscription"/>.</param>
            <returns>The total number of delivered messages.</returns>
        </member>
        <member name="P:NATS.Client.Subscription.IsValid">
            <summary>
            Gets a value indicating whether or not the <see cref="T:NATS.Client.Subscription"/> is still valid.
            </summary>
        </member>
        <member name="M:NATS.Client.Subscription.Unsubscribe">
            <summary>
            Removes interest in the <see cref="P:NATS.Client.Subscription.Subject"/>.
            </summary>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="P:NATS.Client.Subscription.Connection"/></exception>
            <exception cref="T:NATS.Client.NATSConnectionDrainingException">The <see cref="P:NATS.Client.Subscription.Connection"/> is draining.
            for this <see cref="T:NATS.Client.ISubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.Subscription.AutoUnsubscribe(System.Int32)">
            <summary>
            Issues an automatic call to <see cref="M:NATS.Client.Subscription.Unsubscribe"/> when <paramref name="max"/> messages have been
            received.
            </summary>
            <remarks>This can be useful when sending a request to an unknown number of subscribers.
            <see cref="P:NATS.Client.Subscription.Connection"/>'s Request methods use this functionality.</remarks>
            <param name="max">The maximum number of messages to receive on the subscription before calling
            <see cref="M:NATS.Client.Subscription.Unsubscribe"/>. Values less than or equal to zero (<c>0</c>) unsubscribe immediately.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="P:NATS.Client.Subscription.Connection"/>
            for this <see cref="T:NATS.Client.ISubscription"/>.</exception>
        </member>
        <member name="P:NATS.Client.Subscription.QueuedMessageCount">
            <summary>
            Gets the number of messages remaining in the delivery queue.
            </summary>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="P:NATS.Client.Subscription.Connection"/>
            for this <see cref="T:NATS.Client.ISubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.Subscription.Dispose(System.Boolean)">
            <summary>
            Unsubscribes the subscription and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed
            and unmanaged resources; <c>false</c> to release only unmanaged 
            resources.</param>
        </member>
        <member name="M:NATS.Client.Subscription.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:NATS.Client.Subscription"/>.
            </summary>
            <remarks>This method unsubscribes from the subject, to release resources.</remarks>
        </member>
        <member name="M:NATS.Client.Subscription.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>A string that represents the current <see cref="T:NATS.Client.Subscription"/>.</returns>
        </member>
        <member name="M:NATS.Client.Subscription.SetPendingLimits(System.Int64,System.Int64)">
            <summary>
            Sets the limits for pending messages and bytes for this instance.
            </summary>
            <remarks>Zero (<c>0</c>) is not allowed. Negative values indicate that the
            given metric is not limited.</remarks>
            <param name="messageLimit">The maximum number of pending messages.</param>
            <param name="bytesLimit">The maximum number of pending bytes of payload.</param>
        </member>
        <member name="P:NATS.Client.Subscription.PendingByteLimit">
            <summary>
            Gets or sets the maximum allowed count of pending bytes.
            </summary>
            <value>The limit must not be zero (<c>0</c>). Negative values indicate there is no
            limit on the number of pending bytes.</value>
        </member>
        <member name="P:NATS.Client.Subscription.PendingMessageLimit">
            <summary>
            Gets or sets the maximum allowed count of pending messages.
            </summary>
            <value>The limit must not be zero (<c>0</c>). Negative values indicate there is no
            limit on the number of pending messages.</value>
        </member>
        <member name="M:NATS.Client.Subscription.GetPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the pending byte and message counts.
            </summary>
            <param name="pendingBytes">When this method returns, <paramref name="pendingBytes"/> will
            contain the count of bytes not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
            <param name="pendingMessages">When this method returns, <paramref name="pendingMessages"/> will
            contain the count of messages not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
        </member>
        <member name="P:NATS.Client.Subscription.PendingBytes">
            <summary>
            Gets the number of bytes not yet processed on this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.PendingMessages">
            <summary>
            Gets the number of messages not yet processed on this instance.
            </summary>
        </member>
        <member name="M:NATS.Client.Subscription.GetMaxPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the maximum number of pending bytes and messages during the life of the <see cref="T:NATS.Client.Subscription"/>.
            </summary>
            <param name="maxPendingBytes">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending bytes.</param>
            <param name="maxPendingMessages">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending messages.</param>
        </member>
        <member name="P:NATS.Client.Subscription.MaxPendingBytes">
            <summary>
            Gets the maximum number of pending bytes seen so far by this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.MaxPendingMessages">
            <summary>
            Gets the maximum number of messages seen so far by this instance.
            </summary>
        </member>
        <member name="M:NATS.Client.Subscription.ClearMaxPending">
            <summary>
            Clears the maximum pending bytes and messages statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Delivered">
            <summary>
            Gets the number of delivered messages for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Dropped">
            <summary>
            Gets the number of known dropped messages for this instance.
            </summary>
            <remarks>
            This will correspond to the messages dropped by violations of
            <see cref="P:NATS.Client.Subscription.PendingByteLimit"/> and/or <see cref="P:NATS.Client.Subscription.PendingMessageLimit"/>.
            If the NATS server declares the connection a slow consumer, the count
            may not be accurate.
            </remarks>
        </member>
        <member name="M:NATS.Client.Subscription.IsValidSubject(System.String)">
            <summary>
            Checks if a subject is valid.
            </summary>
            <param name="subject">The subject to check</param>
            <returns>true if valid, false otherwise.</returns>
        </member>
        <member name="M:NATS.Client.Subscription.IsValidPrefix(System.String)">
            <summary>
            Checks if a prefix is valid.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Subscription.IsValidQueueGroupName(System.String)">
            <summary>
            Checks if the queue group name is valid.
            </summary>
            <param name="queueGroup"></param>
            <returns>true is the queue group name is valid, false otherwise.</returns>
        </member>
        <member name="T:NATS.Client.SyncSubscription">
            <summary>
            <see cref="T:NATS.Client.SyncSubscription"/> provides messages for a subject through calls
            to <see cref="M:NATS.Client.SyncSubscription.NextMessage"/> and <see cref="M:NATS.Client.SyncSubscription.NextMessage(System.Int32)"/>. This class should
            not be used directly.
            </summary>
        </member>
        <member name="M:NATS.Client.SyncSubscription.NextMessage">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, blocking until one is available.
            </summary>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The connection to the NATS Server
            is closed.</exception>
            <exception cref="T:NATS.Client.NATSMaxMessagesException">The maximum number of messages have been
            delivered to this <see cref="T:NATS.Client.ISyncSubscription"/>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The subscription is closed.</exception>
            <exception cref="T:NATS.Client.NATSSlowConsumerException">The subscription has been marked as a slow consumer.</exception>
        </member>
        <member name="M:NATS.Client.SyncSubscription.NextMessage(System.Int32)">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, or block up to a given timeout until the next one is available.
            </summary>
            <param name="timeout">The amount of time, in milliseconds, to wait for
            the next message.</param>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The connection to the NATS Server
            is closed.</exception>
            <exception cref="T:NATS.Client.NATSMaxMessagesException">The maximum number of messages have been
            delivered to this <see cref="T:NATS.Client.ISyncSubscription"/>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The subscription is closed.</exception>
            <exception cref="T:NATS.Client.NATSSlowConsumerException">The subscription has been marked as a slow consumer.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while waiting for the next available
            <see cref="T:NATS.Client.Msg"/>.</exception>
        </member>
    </members>
</doc>
